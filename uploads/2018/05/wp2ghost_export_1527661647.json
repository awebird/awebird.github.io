{"data":{"posts":[{"id":31,"title":"写在醉开始..","slug":"%e5%86%99%e5%9c%a8%e9%86%89%e5%bc%80%e5%a7%8b","markdown":"\n[![20130502_212157](http://awebird.com/blog/wp-content/uploads/2013/07/20130502_212157-225x300.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/20130502_212157.jpg)\n\n由于Google Reader的关闭，整理订阅的过程中，顺便翻了翻[以前的博客](http://blog.sina.com.cn/uestcldp)，发现写的好多东西居然都不记得了…\n\n微博是信息时代的快餐，记录和表达的成本降低了，带来的是积淀不足。最近几年自己经历了这么多变化，毕业离校、学车、第一份工作、海外出差、离职、从零开始转行做web、新工作、爱情、家庭、朋友… 从成都到深圳、香港、斯里兰卡、南京、上海、青岛甚至还蹭着去美国溜达了一圈，却没有留下一篇文章，生活琐碎记在[推特](https://twitter.com/lidapeng)和[微博](http://weibo.com/uestcldp)，知识乱七八糟的分布在evernote上，只有记录，没有思考和总结…\n\n想到恰好有这么个拿来练手的空间和域名，与其荒废着，不如拿来写点东西，包括生活和工作，后面也会慢慢补充一点前面的事情，幸好过去还不算太久，而且可以自定义“发表时间” LOL\n\n就这样开始吧…\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/20130502_212157.jpg\""><img 2013="" class="\"size-medium" wp-image-33="" alignleft\"="" alt="\"20130502_212157\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/20130502_212157-225x300.jpg\"" width="\"225\"" height="\"300\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/20130502_212157-225x300.jpg" 225w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" 20130502_212157.jpg="" 263w\"="" sizes="\"(max-width:" 225px)="" 100vw,="" 225px\"=""></a></p>\n<p>由于Google Reader的关闭，整理订阅的过程中，顺便翻了翻<a href="\"http://blog.sina.com.cn/uestcldp\"" target="\"_blank\"">以前的博客</a>，发现写的好多东西居然都不记得了&#8230;</p>\n<p>微博是信息时代的快餐，记录和表达的成本降低了，带来的是积淀不足。最近几年自己经历了这么多变化，毕业离校、学车、第一份工作、海外出差、离职、从零开始转行做web、新工作、爱情、家庭、朋友&#8230; 从成都到深圳、香港、斯里兰卡、南京、上海、青岛甚至还蹭着去美国溜达了一圈，却没有留下一篇文章，生活琐碎记在<a href="\"https://twitter.com/lidapeng\"" target="\"_blank\"">推特</a>和<a href="\"http://weibo.com/uestcldp\"" target="\"_blank\"">微博</a>，知识乱七八糟的分布在evernote上，只有记录，没有思考和总结&#8230;<a id="more"></a></p>\n<p>想到恰好有这么个拿来练手的空间和域名，与其荒废着，不如拿来写点东西，包括生活和工作，后面也会慢慢补充一点前面的事情，幸好过去还不算太久，而且可以自定义“发表时间” LOL</p>\n<p>就这样开始吧&#8230;</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 05 Jul 2013 17:09:38 +0000","created_by":1,"updated_at":"Sat, 10 Aug 2013 09:48:12 +0000","updated_by":1,"published_at":"Fri, 05 Jul 2013 17:09:38 +0000","published_by":1},{"id":10,"title":"本科毕设 - 电子技术虚拟实验（基于Flash + ActionScript)","slug":"%e6%9c%ac%e7%a7%91%e6%af%95%e8%ae%be-%e7%94%b5%e5%ad%90%e6%8a%80%e6%9c%af%e8%99%9a%e6%8b%9f%e8%af%95%e9%aa%8c-flash","markdown":"\n[![flash](http://awebird.com/blog/wp-content/uploads/2013/07/flash-300x159.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/flash.jpg)\n\n下面是我本科毕业设计时使用 Flash + ActionScript 做的电子技术虚拟实验。\n\n回想起来，本科#电子科学与技术#四年，研究生#信号与信息处理#三年，最后工作后落入软件和互联网行业，特别是现在专职做Web码农，这3个月时间的毕设居然是跟现在工作最沾边的。\n\n由于研二时候一次脑残的误操作，现在这些源码已经丢失，幸好后来在学校实验中心的网站上找到这些swf文件，重新整理了一下，有两点印象深刻\n\n**（1）UI…**\n\n不得不承认，所谓的“虚拟实验”，由于当时的时间（考研和NBA游戏间隙）和水平（特别是编程水平）的限制，基本上只有很少量的交互，大部分内容只是“下一步”引导出来的演示而已，也就算个高级点的PPT，但是直到现在看来，UI效果还是很不错的。想起来当时接到毕设课题的第一天，就去借个数码相机，把实验中心的电路板和元器件通通拍了一遍，然后最初好几天的工作，就是把电路板的照片放在图层最底，严格按照原尺寸位置还原。现在想想真有做互联网产品的劲头啊，可惜早了那么多年…\n\n**（2）文件大小！**\n\n最后生成的swf文件最大的一个才80多K，包括图片、代码 大概就是一个jquery.mini.js的大小，现在想想真是震惊！看了一下，除了实验二的一个表格偷懒用了截图（不是强迫症看到也抓狂了）之外，剩下所有的文字（打散）、连线、元器件小到电阻上的一个个圈圈，全部采用矢量图绘制，这样不仅文件比较小，而且最好的就是不管到什么时候，采用什么高分辨率的大屏幕看都是一如的细腻效果。\n\n这个毕设项目对我还是比较重要，虽然后面再也没有做过Flash相关的工作，但是这个项目基本做到自己满意的效果，所以尽管后来读研和第一份工作都没有做真正软件开发相关的工作，但是总对自己抱有一点信心，隐隐觉得自己适合并且注定有一天会去做这些事情。于是….. PS: 真心觉得Flash是个很好的技术，Adobe司真是废\n\n其实围绕这个还有不少要说的，后面再慢慢补充吧。终于决定开始在空间慢慢积攒点东西了，就先把这7个swf挂在这里充充门面\n\n电子科技大学 电子实验中心 网站（点击“仿真实验”，后面两个） [http://125.71.228.222/wlxt/ncourse/xddzsy/web/jp/wlxt/wlxt.asp?wedid=wlxt&numb=5](http://125.71.228.222/wlxt/ncourse/xddzsy/web/jp/wlxt/wlxt.asp?wedid=wlxt&numb=5)\n\n1. **实验一 常用数字逻辑门电路的研究**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/szmdl1_files/szmdl.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"high\"" src="\"../bysj/szmdl1_files/szmdl.swf\"" style="\"color:" #333333;="" font-style:="" normal;\"="" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n2. **实验二 移位寄存器及其应用**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/ywjcq_files/ywjcq.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"high\"" src="\"../bysj/ywjcq_files/ywjcq.swf\"" style="\"color:" #333333;="" font-style:="" normal;\"="" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n3. **实验三 触发器实现波形整形及脉冲延时的研究**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/bxzx_files/bxzx.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"high\"" src="\"../bysj/bxzx_files/bxzx.swf\"" style="\"color:" #333333;="" font-style:="" normal;\"="" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n4. **实验四 555集成定时器的使用**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/555_files/555.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"high\"" src="\"../bysj/555_files/555.swf\"" style="\"color:" #333333;="" font-style:="" normal;\"="" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n5. **实验五 数据选择和译码显示**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" id="\"数据选择和译码显示\"" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"best\""><param name="\"src\"" value="\"../bysj/sjxzym_files/sjxzym.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" id="\"数据选择和译码显示\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"best\"" src="\"../bysj/sjxzym_files/sjxzym.swf\"" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n6. **实验六 电子秒表**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/dzmb_files/dzmb.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"high\"" src="\"../bysj/dzmb_files/dzmb.swf\"" style="\"color:" #333333;="" font-style:="" normal;\"="" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n7. **实验七 集成运放波形产生电路**  \n<object align="\"middle\"" bgcolor="\"#ff9933\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" height="\"350\"" style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/yfbx_files/yfbx.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed align="\"middle\"" allowscriptaccess="\"sameDomain\"" bgcolor="\"#ff9933\"" height="\"350\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" quality="\"high\"" src="\"../bysj/yfbx_files/yfbx.swf\"" style="\"color:" #333333;="" font-style:="" normal;\"="" type="\"application/x-shockwave-flash\"" width="\"760\"" wmode="\"opaque\""></object>\n\n原文地址:[ http://awebird.com/blog/art/10](http://awebird.com/blog/art/10)\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/flash.jpg\""><img 2013="" class="\"size-medium" wp-image-39="" aligncenter\"="" alt="\"flash\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/flash-300x159.jpg\"" width="\"300\"" height="\"159\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/flash-300x159.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" flash.jpg="" 450w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>下面是我本科毕业设计时使用 Flash + ActionScript 做的电子技术虚拟实验。</p>\n<p>回想起来，本科#电子科学与技术#四年，研究生#信号与信息处理#三年，最后工作后落入软件和互联网行业，特别是现在专职做Web码农，这3个月时间的毕设居然是跟现在工作最沾边的。<!--more--></p>\n<p>由于研二时候一次脑残的误操作，现在这些源码已经丢失，幸好后来在学校实验中心的网站上找到这些swf文件，重新整理了一下，有两点印象深刻</p>\n<p><strong>（1）UI&#8230;</strong></p>\n<p>不得不承认，所谓的“虚拟实验”，由于当时的时间（考研和NBA游戏间隙）和水平（特别是编程水平）的限制，基本上只有很少量的交互，大部分内容只是“下一步”引导出来的演示而已，也就算个高级点的PPT，但是直到现在看来，UI效果还是很不错的。想起来当时接到毕设课题的第一天，就去借个数码相机，把实验中心的电路板和元器件通通拍了一遍，然后最初好几天的工作，就是把电路板的照片放在图层最底，严格按照原尺寸位置还原。现在想想真有做互联网产品的劲头啊，可惜早了那么多年&#8230;</p>\n<p><strong>（2）文件大小！</strong></p>\n<p>最后生成的swf文件最大的一个才80多K，包括图片、代码 大概就是一个jquery.mini.js的大小，现在想想真是震惊！看了一下，除了实验二的一个表格偷懒用了截图（不是强迫症看到也抓狂了）之外，剩下所有的文字（打散）、连线、元器件小到电阻上的一个个圈圈，全部采用矢量图绘制，这样不仅文件比较小，而且最好的就是不管到什么时候，采用什么高分辨率的大屏幕看都是一如的细腻效果。</p>\n<p>这个毕设项目对我还是比较重要，虽然后面再也没有做过Flash相关的工作，但是这个项目基本做到自己满意的效果，所以尽管后来读研和第一份工作都没有做真正软件开发相关的工作，但是总对自己抱有一点信心，隐隐觉得自己适合并且注定有一天会去做这些事情。于是&#8230;.. PS: 真心觉得Flash是个很好的技术，Adobe司真是废</p>\n<p>其实围绕这个还有不少要说的，后面再慢慢补充吧。终于决定开始在空间慢慢积攒点东西了，就先把这7个swf挂在这里充充门面</p>\n<p>电子科技大学 电子实验中心 网站（点击“仿真实验”，后面两个） <a href="\"http://125.71.228.222/wlxt/ncourse/xddzsy/web/jp/wlxt/wlxt.asp?wedid=wlxt&amp;numb=5\"">http://125.71.228.222/wlxt/ncourse/xddzsy/web/jp/wlxt/wlxt.asp?wedid=wlxt&amp;numb=5</a></p>\n<ol>\n<li><strong>实验一 常用数字逻辑门电路的研究</strong><br>\n<object style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/szmdl1_files/szmdl.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/szmdl1_files/szmdl.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"high\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n<li><strong>实验二 移位寄存器及其应用</strong><br>\n<object style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/ywjcq_files/ywjcq.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/ywjcq_files/ywjcq.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"high\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n<li><strong>实验三 触发器实现波形整形及脉冲延时的研究</strong><br>\n<object style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/bxzx_files/bxzx.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/bxzx_files/bxzx.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"high\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n<li><strong>实验四 555集成定时器的使用</strong><br>\n<object style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/555_files/555.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/555_files/555.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"high\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n<li><strong>实验五 数据选择和译码显示</strong><br>\n<object id="\"数据选择和译码显示\"" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"best\""><param name="\"src\"" value="\"../bysj/sjxzym_files/sjxzym.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed id="\"数据选择和译码显示\"" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/sjxzym_files/sjxzym.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"best\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n<li><strong>实验六 电子秒表</strong><br>\n<object style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/dzmb_files/dzmb.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/dzmb_files/dzmb.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"high\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n<li><strong>实验七 集成运放波形产生电路</strong><br>\n<object style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" classid="\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"" codebase="\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"" align="\"middle\"" bgcolor="\"#ff9933\""><param name="\"wmode\"" value="\"opaque\""><param name="\"allowScriptAccess\"" value="\"sameDomain\""><param name="\"quality\"" value="\"high\""><param name="\"src\"" value="\"../bysj/yfbx_files/yfbx.swf\""><param name="\"allowscriptaccess\"" value="\"sameDomain\""><param name="\"pluginspage\"" value="\"http://www.macromedia.com/go/getflashplayer\""><embed style="\"color:" #333333;="" font-style:="" normal;\"="" width="\"760\"" height="\"350\"" type="\"application/x-shockwave-flash\"" src="\"../bysj/yfbx_files/yfbx.swf\"" wmode="\"opaque\"" allowscriptaccess="\"sameDomain\"" quality="\"high\"" pluginspage="\"http://www.macromedia.com/go/getflashplayer\"" align="\"middle\"" bgcolor="\"#ff9933\""></object></li>\n</ol>\n<p>原文地址:<a href="\"http://awebird.com/blog/art/10\""> http://awebird.com/blog/art/10</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 06 Jul 2013 00:37:38 +0000","created_by":1,"updated_at":"Thu, 18 Jul 2013 22:06:16 +0000","updated_by":1,"published_at":"Sat, 06 Jul 2013 00:37:38 +0000","published_by":1},{"id":24,"title":"部分国行Android手机缺少谷歌GMS服务包导致HTML5 Geolocation无法定位的问题","slug":"%e9%83%a8%e5%88%86%e5%9b%bd%e8%a1%8candroid%e6%89%8b%e6%9c%ba%e7%bc%ba%e5%b0%91%e8%b0%b7%e6%ad%8cgsm%e6%9c%8d%e5%8a%a1%e5%8c%85%e5%af%bc%e8%87%b4html5","markdown":"\n[![phone](http://awebird.com/blog/wp-content/uploads/2013/07/phone-150x300.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/phone.jpg)\n\n最近项目上用到HTML5的geolocation用于定位，用Chrome和手头的手机测试好好的功能，到终端用户那里反馈一些手机不能定位，最后确定出是部分三星、摩托的部分国行Android手机“阉割”了谷歌GMS服务包，导致HTML5的geolocation无法使用wifi和基站定位服务导致。\n\n值得一提的是前期在stackoverflow和google groups里搜到对症描述的解决方案（貌似Android 2.*或者三星自身的问题）全部失效，因为介是个“中国特色”的问题-_lll\n\n首先介绍下HTML5的Geolocation功能。通常情况下，我们是先判断浏览器是否支持geolocation, 如果不支持，可以提示错误，或者进入其他逻辑处理流程，现在移动端的智能手机浏览器绝大部分都是支持的。\n\nif( navigator.geolocation ){ navigator.geolocation.getCurrentPosition( updateLocation, handleLocationError, {maximumAge:60000, timeout:50000, enableHighAccuracy:true} ); }else{ alert( \"对不起，您的浏览器不支持html5定位\"); }\n\n但是navigator.geolocation为true只是代表浏览器支持，浏览器还是要通过调用手机的定位功能来实现，所以上面的getCurrentPosition后面，分别后updateLocation和handleLocationError两个分支，分别对应成功而和失败的后续处理，这篇文章提到的由于缺少谷歌GMS服务包造成geolcation失效的情况就是走到了handleLocationError分支。\n\nfunction handleLocationError(error) { switch(error.code){ case 0: alert(\"获取位置信息出错！\"); break; case 1: alert(\"您设置了阻止该页面获取位置信息！\"); break; case 2: alert(\"浏览器无法确定您的位置！\"); break; case 3: alert(\"获取位置信息超时！\"); break; } }\n\n具体的返回值可以查手册，缺少谷歌GMS服务包的手机，会进入case 2，其实是“无法使用定位服务”。\n\n写到这里，只是说明了原因，那有没有什么解决方案呢。搜索了下，原来提供地图和定位相关服务的不止是google一家，还有百度、高德、搜狗，下面介绍下百度的api\n\n**（1）百度地图javascript API geolocation**\n\nhttp://developer.baidu.com/map/jshome.htm\n\n咋一看，百度js api也有自己的geolocation(http://developer.baidu.com/map/reference/index.php?title=Class:%E6%9C%8D%E5%8A%A1%E7%B1%BB/Geolocation) 这个取代html5自带的不就可以了么，经过实验，真是图样图森破了，原来所有的javascript API都还是调用的浏览器自身的geolocation进行封装实现的，也就是说如果原本不能wifi+基站定位，用百度、高德的javascript api的效果是一样的。\n\n这里要说明的是，如果是开发Android原生软件的话，可以在APP里封装百度地图定位的SDK，这个是可以解决没有谷歌GMS服务包无法定位的问题的，因为百度地图定位SDK实际上是起到和谷歌服务包里面的定位模块一样的作用，由这里也可以看到HTML5 Webapp和原生APP的一个差别，不是一个层面的解决方案。\n\n**（2）使用百度的LocalCity() 根据IP定位到城市**\n\n既然上面说的HTML5自带的geolocation和百度Javascript API的geolocation都不能用了，那么就完全不能定位了么，我们这里暂时采用了一个方案，就是使用百度的LocalCity接口，进行IP定位，可惜这个只能返回城市和市中心的坐标，对于需要精确定位的LBS产品基本没有意义（根源上IPv4时代通过IP定位的想法本来就不是很靠谱吧），但是对我们的产品不失为一种可以接收的降级方案，当然用户体验上需要通过文字说明或者弹窗的形式告知用户一。**  \n**\n\nfunction myFun(result){ var latitude = result.center.lat; var longitude = result.center.lng; //doSomething(latitude,longitude); } var myCity = new BMap.LocalCity(); myCity.get(myFun);\n\n**（3）使用百度的IP定位API**\n\nhttp://developer.baidu.com/map/ip-location-api.htm\n\nvar ajaxObj = createXHR(); ajaxObj.onreadystatechange = function() { if (ajaxObj.readyState == 4) { if ((ajaxObj.status >= 200 && ajaxObj.status < 300) || ajaxObj.status == 304) { var jsonObj = eval(\"(\" + ajaxObj.responseText + \")\"); var point_x=jsonObj.content.point.x; var point_y=jsonObj.content.point.y; var axis = new BMap.MercatorProjection().pointToLngLat(new BMap.Pixel(point_x,point_y)); var latitude = axis.lat; var longitude = axis.lng; //doSomething(latitude,longitude); } } }; ajaxObj.open(\"POST\", \"http://www.awebird.com/get_ip.php\", true); ajaxObj.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\"); ajaxObj.send(\"sendmessage=\");\n\n这理论上讲应该是个更好的解决方案，但是从实际使用测试来看，由于IP定位的局限性，实际上虽然返回的坐标不是市中心，但是也基本没有参考价值，所以只是把实现方法列一下，或许等到IPv6时代会有用吧。\n\n这个api有几个值得注意的地方\n\n（1）由于安全起见，所以Javascript是不支持直接获取IP地址的，所以需要服务器端，此外，如果手机程序是webapp或者和服务器不在一个域的话，还需要跨域支持，我们这里使用的是CORS跨域，get_ip.php如下（包括获取IP地址，和根据IP请求百度IP定位API获得城市信息）\n\n<?php $client_ip = getRealIpAddr(); $baidu_result = file_get_contents('http://api.map.baidu.com/location/ip?ak=6227cb21d6ab31a87a5ae231f7xxxxxx&ip='.$client_ip); //注意上面的ak最后6位略去，需要使用自己免费注册的百度api的ak header(\"Access-Control-Allow-Origin: *\"); //CROS跨域 header(\"Content-Type:text/html; charset=utf-8\"); echo $baidu_result; function getRealIpAddr(){ if (!empty($_SERVER['HTTP_CLIENT_IP'])){ $ip=$_SERVER['HTTP_CLIENT_IP']; }elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])){ $ip=$_SERVER['HTTP_X_FORWARDED_FOR']; }else{ $ip=$_SERVER['REMOTE_ADDR']; } return $ip; }\n\n（2）百度IP定位API获得的坐标point需要经过坐标系转换成lat lng采用和其它接口公用\n\n参见上面js里的\n\nvar axis = new BMap.MercatorProjection().pointToLngLat(new BMap.Pixel(point_x,point_y)); var latitude = axis.lat; var longitude = axis.lng;\n\n好了，本来还准备放一个DEMO的，暂时没有时间，以后可能会补充上来\n\n原文地址: [http://awebird.com/blog/art/24](http://awebird.com/blog/art/24)\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/phone.jpg\""><img 2013="" class="\"size-medium" wp-image-41="" alignleft\"="" alt="\"phone\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/phone-150x300.jpg\"" width="\"150\"" height="\"300\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/phone-150x300.jpg" 150w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" phone.jpg="" 213w\"="" sizes="\"(max-width:" 150px)="" 100vw,="" 150px\"=""></a><p></p>\n<p>最近项目上用到HTML5的geolocation用于定位，用Chrome和手头的手机测试好好的功能，到终端用户那里反馈一些手机不能定位，最后确定出是部分三星、摩托的部分国行Android手机“阉割”了谷歌GMS服务包，导致HTML5的geolocation无法使用wifi和基站定位服务导致。</p>\n<p>值得一提的是前期在stackoverflow和google groups里搜到对症描述的解决方案（貌似Android 2.*或者三星自身的问题）全部失效，因为介是个“中国特色”的问题-_lll</p>\n<p>首先介绍下HTML5的Geolocation功能。通常情况下，我们是先判断浏览器是否支持geolocation, 如果不支持，可以提示错误，或者进入其他逻辑处理流程<!--more-->，现在移动端的智能手机浏览器绝大部分都是支持的。</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">if( navigator.geolocation ){\r\n    navigator.geolocation.getCurrentPosition( \r\n        updateLocation, handleLocationError, \r\n        {maximumAge:60000, timeout:50000, enableHighAccuracy:true}\r\n        );\r\n}else{\r\n    alert( &quot;对不起，您的浏览器不支持html5定位&quot;);\r\n}</pre>\n<p>但是navigator.geolocation为true只是代表浏览器支持，浏览器还是要通过调用手机的定位功能来实现，所以上面的getCurrentPosition后面，分别后updateLocation和handleLocationError两个分支，分别对应成功而和失败的后续处理，这篇文章提到的由于缺少谷歌GMS服务包造成geolcation失效的情况就是走到了handleLocationError分支。</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">function handleLocationError(error) {\r\n    switch(error.code){\r\n        case 0:\r\n          alert(&quot;获取位置信息出错！&quot;);\r\n          break;\r\n        case 1:\r\n          alert(&quot;您设置了阻止该页面获取位置信息！&quot;);\r\n          break;\r\n        case 2:\r\n          alert(&quot;浏览器无法确定您的位置！&quot;);\r\n          break;\r\n        case 3:\r\n          alert(&quot;获取位置信息超时！&quot;);\r\n          break;\r\n    }\r\n}</pre>\n<p>具体的返回值可以查手册，缺少谷歌GMS服务包的手机，会进入case 2，其实是“无法使用定位服务”。</p>\n<p>写到这里，只是说明了原因，那有没有什么解决方案呢。搜索了下，原来提供地图和定位相关服务的不止是google一家，还有百度、高德、搜狗，下面介绍下百度的api</p>\n<p><strong>（1）百度地图javascript API geolocation</strong></p>\n<p>http://developer.baidu.com/map/jshome.htm</p>\n<p>咋一看，百度js api也有自己的geolocation(http://developer.baidu.com/map/reference/index.php?title=Class:%E6%9C%8D%E5%8A%A1%E7%B1%BB/Geolocation) 这个取代html5自带的不就可以了么，经过实验，真是图样图森破了，原来所有的javascript API都还是调用的浏览器自身的geolocation进行封装实现的，也就是说如果原本不能wifi+基站定位，用百度、高德的javascript api的效果是一样的。</p>\n<p>这里要说明的是，如果是开发Android原生软件的话，可以在APP里封装百度地图定位的SDK，这个是可以解决没有谷歌GMS服务包无法定位的问题的，因为百度地图定位SDK实际上是起到和谷歌服务包里面的定位模块一样的作用，由这里也可以看到HTML5 Webapp和原生APP的一个差别，不是一个层面的解决方案。</p>\n<p><strong>（2）使用百度的LocalCity() 根据IP定位到城市</strong></p>\n<p>既然上面说的HTML5自带的geolocation和百度Javascript API的geolocation都不能用了，那么就完全不能定位了么，我们这里暂时采用了一个方案，就是使用百度的LocalCity接口，进行IP定位，可惜这个只能返回城市和市中心的坐标，对于需要精确定位的LBS产品基本没有意义（根源上IPv4时代通过IP定位的想法本来就不是很靠谱吧），但是对我们的产品不失为一种可以接收的降级方案，当然用户体验上需要通过文字说明或者弹窗的形式告知用户一。<strong><br>\n</strong></p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">function myFun(result){\r\n    var latitude = result.center.lat;\r\n    var longitude = result.center.lng;\r\n\r\n    //doSomething(latitude,longitude);\r\n}\r\nvar myCity = new BMap.LocalCity();\r\nmyCity.get(myFun);</pre>\n<p><strong>（3）使用百度的IP定位API</strong></p>\n<p>http://developer.baidu.com/map/ip-location-api.htm</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">var ajaxObj = createXHR(); \r\najaxObj.onreadystatechange = function() {\r\n    if (ajaxObj.readyState == 4) {\r\n        if ((ajaxObj.status &gt;= 200 &amp;&amp; ajaxObj.status &lt; 300) || ajaxObj.status == 304) {\r\n            var jsonObj = eval(&quot;(&quot; + ajaxObj.responseText + &quot;)&quot;); \r\n            var point_x=jsonObj.content.point.x;\r\n            var point_y=jsonObj.content.point.y;\r\n            var axis = new BMap.MercatorProjection().pointToLngLat(new BMap.Pixel(point_x,point_y));\r\n\r\n            var latitude = axis.lat;\r\n            var longitude = axis.lng;\r\n\r\n\t    //doSomething(latitude,longitude);\r\n        }\r\n    }\r\n};\r\najaxObj.open(&quot;POST&quot;, &quot;http://www.awebird.com/get_ip.php&quot;, true); \r\najaxObj.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);\r\najaxObj.send(&quot;sendmessage=&quot;);</pre>\n<p>这理论上讲应该是个更好的解决方案，但是从实际使用测试来看，由于IP定位的局限性，实际上虽然返回的坐标不是市中心，但是也基本没有参考价值，所以只是把实现方法列一下，或许等到IPv6时代会有用吧。</p>\n<p>这个api有几个值得注意的地方</p>\n<p>（1）由于安全起见，所以Javascript是不支持直接获取IP地址的，所以需要服务器端，此外，如果手机程序是webapp或者和服务器不在一个域的话，还需要跨域支持，我们这里使用的是CORS跨域，get_ip.php如下（包括获取IP地址，和根据IP请求百度IP定位API获得城市信息）</p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">&lt;?php\r\n    $client_ip = getRealIpAddr();\r\n    $baidu_result = file_get_contents(&#039;http://api.map.baidu.com/location/ip?ak=6227cb21d6ab31a87a5ae231f7xxxxxx&amp;ip=&#039;.$client_ip);\r\n    //注意上面的ak最后6位略去，需要使用自己免费注册的百度api的ak\r\n    header(&quot;Access-Control-Allow-Origin: *&quot;); //CROS跨域\r\n    header(&quot;Content-Type:text/html; charset=utf-8&quot;);\r\n    echo $baidu_result;\r\n\r\n    function getRealIpAddr(){\r\n        if (!empty($_SERVER[&#039;HTTP_CLIENT_IP&#039;])){\r\n            $ip=$_SERVER[&#039;HTTP_CLIENT_IP&#039;];\r\n        }elseif (!empty($_SERVER[&#039;HTTP_X_FORWARDED_FOR&#039;])){\r\n            $ip=$_SERVER[&#039;HTTP_X_FORWARDED_FOR&#039;];\r\n        }else{\r\n            $ip=$_SERVER[&#039;REMOTE_ADDR&#039;];\r\n        }\r\n        return $ip;\r\n    }</pre>\n<p>（2）百度IP定位API获得的坐标point需要经过坐标系转换成lat lng采用和其它接口公用</p>\n<p>参见上面js里的</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">var axis = new BMap.MercatorProjection().pointToLngLat(new BMap.Pixel(point_x,point_y));\r\n\r\nvar latitude = axis.lat;\r\nvar longitude = axis.lng;</pre>\n<p>好了，本来还准备放一个DEMO的，暂时没有时间，以后可能会补充上来</p>\n<p>原文地址: <a href="\"http://awebird.com/blog/art/24\"">http://awebird.com/blog/art/24</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 07 Jul 2013 12:01:28 +0000","created_by":1,"updated_at":"Tue, 23 Jul 2013 12:41:02 +0000","updated_by":1,"published_at":"Sun, 07 Jul 2013 12:01:28 +0000","published_by":1},{"id":26,"title":"中转服务器JSONP跨域 & 使用CORS跨域","slug":"%e4%b8%ad%e8%bd%ac%e6%9c%8d%e5%8a%a1%e5%99%a8jsonp%e8%b7%a8%e5%9f%9f-%e4%bd%bf%e7%94%a8cros%e8%b7%a8%e5%9f%9f","markdown":"\n[![gg](http://awebird.com/blog/wp-content/uploads/2013/07/gg-300x155.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/gg.jpg)\n\n由于项目中使用较多前后端分离，所以跨域成了经常要面对的问题。\n\n**（1）JSONP跨域，通过中转服务器中转**\n\n跨域的一种常用方式是jsonp，如果可以修改服务器端数据的话，需要js和服务器端同时处理对接，如果没有服务器端接口的修改权限，也可以在任意自己可以修改的服务器端的域里放一个中转文件url4ajax.php\n\n<?php $server_url=urldecode($_GET['url']); $json=file_get_contents($server_url); if(empty($_GET['callback'])){ echo $json; //ajax json }elseif($_GET['notjson'] && $_GET['notjson']=='1'){ echo trim($_GET['callback']).\"({'content':'\".mysql_real_escape_string(trim($json)).\"'})\"; //ajax jsonp 返回数据不为json时，拼接成json }else{ echo trim($_GET['callback']).'('.$json.')'; //ajax jsonp }\n\n这样在客户端，可以通过$.getJSON获取原本不能跨域访问的数据接口（如下代码，为客户端通过$.getJSON经由www.midurl.com跨域访问www.dataurl.com的数据）\n\nvar DataUrl = \"http://www.dataurl.com/xxxxxxx; MidUrl = \"http://www.midurl.com/url4ajax.php?url=\" + encodeURIComponent( DataUrl ) + \"&callback=?\" ; $.getJSON(MidUrl, function(data){ //doSomething });\n\n**（2）CORS跨域**\n\nJSONP是跨域的常用手段，但是有个限制，就是参数传递是以http get的方式，这样在提交表单，特别是大数据量的情况下就不再适用。做手机端项目的时候，我们开始采用另一种跨域方法，基于CORS跨域，由于浏览器支持的情况，桌面端的网站还不能够采用这种方式。\n\n改方法非常方便，其实只需要在服务器端加一行 header(“Access-Control-Allow-Origin: *”); 就可以解决\n\n具体的介绍可以参考\n\n[http://blog.csdn.net/hfahe/article/details/7730944](http://blog.csdn.net/hfahe/article/details/7730944)\n\n下面是一个最简的例子\n\n服务器端\n\n<?php $name=$_POST['name']; header(\"Access-Control-Allow-Origin: *\"); echo \"haha,your name is \".$name;\n\n客户端\n\n   <meta charset=\"UTF-8\"><meta name="\"viewport\"" content="\"width=device-width," initial-scale="1.0," user-scalable="0," minimum-scale="1.0," maximum-scale="1.0\""> <meta name="\"apple-mobile-web-app-capable\"" content="\"yes\""> <title>测试CROS</title>   <label>输入姓名：</label><input id="\"user_input\"" type="\"text\""> <input id="\"submit_btn\"" type="\"button\"" value="\"点击发送\""><br> <label>收到反馈：<label id="\"respose_text\"" style="\"color:red;\""></label> <script src="\"http://libs.baidu.com/jquery/1.9.0/jquery.js\""></script> <script type="\"text/javascript\""> $('#submit_btn').click(function(){ $.ajax({ url:'http://www.serverurl.com/test_cors.php', data:{name:$('#user_input').val()}, dataType:\"text\", type:\"POST\", success:function (result,textStatus){ $('#respose_text').text(result); } }); }); </script>  \n\n原文地址: [http://awebird.com/blog/art/26](http://awebird.com/blog/art/26)\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/gg.jpg\""><img 2013="" class="\"size-medium" wp-image-71="" aligncenter\"="" alt="\"gg\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/gg-300x155.jpg\"" width="\"300\"" height="\"155\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/gg-300x155.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" gg.jpg="" 325w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>由于项目中使用较多前后端分离，所以跨域成了经常要面对的问题。</p>\n<p><strong>（1）JSONP跨域，通过中转服务器中转</strong></p>\n<p>跨域的一种常用方式是jsonp，如果可以修改服务器端数据的话，需要js和服务器端同时处理对接，如果没有服务器端接口的修改权限，也可以在任意自己可以修改的服务器端的域里放一个中转文件url4ajax.php<!--more--></p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">&lt;?php\r\n$server_url=urldecode($_GET[&#039;url&#039;]);\r\n\r\n$json=file_get_contents($server_url);\r\n\r\nif(empty($_GET[&#039;callback&#039;])){\r\n\techo $json; //ajax json\r\n}elseif($_GET[&#039;notjson&#039;] &amp;&amp; $_GET[&#039;notjson&#039;]==&#039;1&#039;){\r\n\techo trim($_GET[&#039;callback&#039;]).&quot;({&#039;content&#039;:&#039;&quot;.mysql_real_escape_string(trim($json)).&quot;&#039;})&quot;; //ajax jsonp 返回数据不为json时，拼接成json\r\n}else{\r\n\techo trim($_GET[&#039;callback&#039;]).&#039;(&#039;.$json.&#039;)&#039;; //ajax jsonp\r\n}</pre>\n<p>这样在客户端，可以通过$.getJSON获取原本不能跨域访问的数据接口（如下代码，为客户端通过$.getJSON经由www.midurl.com跨域访问www.dataurl.com的数据）</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">var DataUrl = &quot;http://www.dataurl.com/xxxxxxx;\r\nMidUrl = &quot;http://www.midurl.com/url4ajax.php?url=&quot; + encodeURIComponent( DataUrl ) + &quot;&amp;callback=?&quot; ;\r\n$.getJSON(MidUrl, function(data){\r\n    //doSomething\r\n});</pre>\n<p><strong>（2）CORS跨域</strong></p>\n<p>JSONP是跨域的常用手段，但是有个限制，就是参数传递是以http get的方式，这样在提交表单，特别是大数据量的情况下就不再适用。做手机端项目的时候，我们开始采用另一种跨域方法，基于CORS跨域，由于浏览器支持的情况，桌面端的网站还不能够采用这种方式。</p>\n<p>改方法非常方便，其实只需要在服务器端加一行 header(&#8220;Access-Control-Allow-Origin: *&#8221;); 就可以解决</p>\n<p>具体的介绍可以参考</p>\n<p><a href="\"http://blog.csdn.net/hfahe/article/details/7730944\"" target="\"_blank\"">http://blog.csdn.net/hfahe/article/details/7730944</a></p>\n<p>下面是一个最简的例子</p>\n<p>服务器端</p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">&lt;?php\r\n$name=$_POST[&#039;name&#039;];\r\nheader(&quot;Access-Control-Allow-Origin: *&quot;);\r\necho &quot;haha,your name is &quot;.$name;</pre>\n<p>客户端</p>\n<pre class="\"brush:" html;="" gutter:="" false\"="">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n\t&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0&quot;&gt;\r\n\t&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;\r\n\t&lt;title&gt;测试CROS&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;label&gt;输入姓名：&lt;/label&gt;&lt;input id=&quot;user_input&quot; type=&quot;text&quot;&gt;&lt;/input&gt;\r\n&lt;input id=&quot;submit_btn&quot; type=&quot;button&quot; value=&quot;点击发送&quot; /&gt;&lt;br&gt;\r\n&lt;label&gt;收到反馈：&lt;label id=&quot;respose_text&quot; style=&quot;color:red;&quot;&gt;&lt;/label&gt;\r\n&lt;script src=&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;&gt;&lt;/script&gt;\r\n&lt;script type=&quot;text/javascript&quot;&gt;\r\n        $(&#039;#submit_btn&#039;).click(function(){\r\n            $.ajax({\r\n                url:&#039;http://www.serverurl.com/test_cors.php&#039;,\r\n                data:{name:$(&#039;#user_input&#039;).val()},\r\n                dataType:&quot;text&quot;, \r\n                type:&quot;POST&quot;,\r\n                success:function (result,textStatus){\r\n                    $(&#039;#respose_text&#039;).text(result);\r\n                }\r\n            });\r\n        });\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre>\n<p>原文地址: <a href="\"http://awebird.com/blog/art/26\"">http://awebird.com/blog/art/26</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 07 Jul 2013 16:43:08 +0000","created_by":1,"updated_at":"Thu, 18 Jul 2013 22:06:52 +0000","updated_by":1,"published_at":"Sun, 07 Jul 2013 16:43:08 +0000","published_by":1},{"id":55,"title":"【翻译】即学即用的Web前端优化技巧 ( Front-end optimizations you can start doing right now )","slug":"%e3%80%90%e7%bf%bb%e8%af%91%e3%80%91%e5%8d%b3%e5%ad%a6%e5%8d%b3%e7%94%a8%e7%9a%84web%e5%89%8d%e7%ab%af%e4%bc%98%e5%8c%96%e6%8a%80%e5%b7%a7-front-end-o","markdown":"\n英文原文 [http://odiseo.net/javascript/front-end-optimizations-you-can-do-right-now-on-your-existing-code](http://odiseo.net/javascript/front-end-optimizations-you-can-do-right-now-on-your-existing-code)\n\n[![thumb](http://awebird.com/blog/wp-content/uploads/2013/07/thumb-300x144.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/thumb.jpg)\n\n强烈建议各位Web前端开发人员都要“真正”去[学习Javascript](http://javascriptissexy.com/16-javascript-concepts-you-must-know-well/)并且掌握基本的[DOM](http://domenlightenment.com/)知识。诚然我也不得不赞同，不少基于Javascript特性的小把戏和小技巧根本就不会带来终端用户能明显觉察到的[性能提升](http://ericleads.com/2013/04/youre-optimizing-the-wrong-things/)。话虽如此，我会在这篇文章里分享一些优化技巧，你可以马上在代码里使用这些技巧从而让程序跑的更快。而且从今以后，每当在项目里使用Javascript的时候你都应该想到并实践这些优化。\n\n\n# 精明的使用选择器 Use selectors wisely\n\n假设程序里有一个id为#profile-container的div, 你想在其内部选择一个或多个class为myClass的input元素。你可能会很快写出下面这样一个jquery选择器：\n\n$('#profile-container input.myClass')\n\n这句可以满足需求，但并不是最好的方法。事实上，**$(‘#profile-container’).find(‘input.myClass’)**会比上面那句更快。为什么呢？这需要了解下[Jquery选择器机制](http://blog.bigbinary.com/2010/02/15/how-jquery-selects-elements-using-sizzle.html)。首先，$(‘#profile-container’)这个选择器可以很快的获得要选取的部分，这样当使用find()的时候，就会限制在一个很有限的查找范围，从而提升了性能。可以参开[Jquery源码](http://www.explainjs.com/explain?src=http://code.jquery.com/jquery-1.9.1.js)。\n\nRob Tarr的[文章](http://seesparkbox.com/foundry/jquery_selector_performance_testing)给出的一些测试结果可以印证这点，他还发现如果链式的使用find()逐层查找会更快，比如**$(‘.container’).find(‘.main’).find(‘ul.list-1′).find(‘li’)**\n\n[![C9LBtwc.png](http://awebird.com/blog/wp-content/uploads/2013/07/C9LBtwc-208x300.png)](http://awebird.com/blog/wp-content/uploads/2013/07/C9LBtwc.png)\n\n*seesparkbox.com给出的选择器测试比较的结果*\n\n另一种精明的使用选择器提高性能的办法就是明确的的声明需要查找的元素类型。比如，如果我们知道要选择的元素类型的话，**$(‘ul.todo’)**明显会比**$(‘.todo’)**快的多。\n\n\n# 缓存jQuery选择器的结果 Cache jQuery selector results\n\n这实际上是一个总所周知的技巧，“不要重复”是经典的提升性能的准则和最佳实践。在Greg Franko精彩的幻灯片“[jQuery最佳实践](http://gregfranko.com/jquery-best-practices/)”里有一个有趣的例子：\n\n// Set's an element's title attribute using it's current text $(\".container input#elem\").attr(\"title\", $(\".container input#elem\").text()); // Set's an element's text color to red $(\".container input#elem\").css(\"color\", \"red\"); // Makes the element fade out $(\".container input#elem\").fadeOut();\n\n问题就在于当我们每次调用**$(“.container input#elem”)**的时候，jQuery都需要使用一次选择器，也就是要遍历一遍所有的DOM。也是就说**“.container input#elem”**这个查找过程要重复执行4次！上面的代码应该修改成下面这样\n\n// Stores the live DOM element inside of a variable var elem = $(\"#elem\"); // Set's an element's title attribute using it's current text elem.attr(\"title\", elem.text()); // Set's an element's text color to red elem.css(\"color\", \"red\"); // Makes the element fade out elem.fadeOut();\n\n注意这里很“抠门”的使用了选择器，因为我们要查找一个id，所以就没有必要去关心这个id是在某个class或者html元素里了。只需要#elem，这样即简单，也更快。\n\n\n# 缓存.length属性 Cache .length property\n\n在Javascript里，每次获取数组的**.length**属性的时候，都需要进行一次运算。因为，对于下面这样一段代码：\n\nfor (var i = 0; i < myArray.length; i++){...}\n\n假设myArray数组大小是10000的话，每次循环计算一次， myArray.length的值就会重复计算10000次。所以你应该按下面这样写：\n\nvar arrayLength = myArray.length; for (var i = 0; i < arrayLength; i++){...}\n\n这样，只需要计算一次arrayLength就可以了。\n\n这个真的这么重要么？其实在现代浏览器中，这两种的区别是[微乎其微](http://jsperf.com/caching-array-length/4)的，因为浏览器引擎已经做了这种优化。那么以后是否就完全不需要考虑这些了么？让我们看一下[**comp.lang.javascript新闻组的Thomas Lahn的观点**](http://www.ctomczyk.pl/to-cache-or-not-to-cache-length-property/231/)（<span style="\"text-decoration:" line-through;\"="">简单</span>但<span style="\"text-decoration:" line-through;\"="">比较哲学，译不出味道来，先放弃</span>）：\n\n> One should never rely on what one cannot know. You cannot know the runtime environments code once written will be exposed to. There is no good reason to assume the value of the “length” property should be automatically cached for a loop in the first place as it could change by statements in the loop.\n> \n> One **can** know instead that avoiding to access a property repeatedly whose value does not change, in favor of a local variable that holds this value, reduces code complexity. That has a chance – and it has been showed – to increase runtime efficiency, IOW to be faster. So it is wise to do that.\n\n\n# \n\n\n# 最小化DOM操作 Minimize DOM operations\n\n写DOM是很“重”的操作。记住：[DOM很慢](http://ejohn.org/blog/the-dom-is-a-mess/)。如果没意识到这点，你早晚会遇到性能问题。下面是一个让浏览器不堪重负的经典案例：\n\nvar toDoList = $(\"#todoList\"); myTasks.forEach(function(task){ toDoList.append(\"<li id="\"" +="" task.index="" \"="">\" + task.name + \"</li>\"); });\n\n在这里例子里面，我们每次forEach循环都会有读&写DOM的操作。实际上我们可以通过把这些节点存储在一个变量里，等到循环结束以后再一次性的把累积的变量写入DOM，从而规避这种混乱的情况。这样就只需要“附加”操作一次：\n\nvar toDoList = $(\"#todoList\"); dynamicItems = \"\"; myTasks.forEach(function(task){ dynamicItems += \"<li id="\"" +="" index="" \"="">\" + value + \"</li>\"; }); toDoList.append(dynamicItems);\n\n\n# 避免重复创建对象 Avoid repeated object creation\n\n如果在函数中创建了一个对象的话，那么这个对象在每次函数调用的时候都会被重复创建一次。这可能并不是你的本意，特别是当这个对象是静态的，你本来没准备在任何情况下改变它的时候。让我们看下[David Walsh给出的例子](http://davidwalsh.name/javascript-optimization)：\n\nfunction cleanText(dirty) { // Get rid of SCRIPT tags clean = dirty.replace(/<script[^>]*>([\\s\\S]*?)<\\ script="">/gi, \"\"); // Do some more cleaning, maybe whitespace, etc. return clean; }\n\n文字记号**//**实际上是**new RegExp**的缩写形式，也就是说每次使用类似**/ab+c/**这样的语句实际上就同时[创建了一个正则表达式对象](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)：\n\n//both expressions are equivalent var re = /ab+c/; var re = new RegExp(\"ab+c\");\n\n在本例中，我们其实并不需要每次都创建一个正则表达式对象。可以像这面这样通过在函数外创建对象，然后在函数中调用（*<span style="\"text-decoration:" line-through;\"="">through a closure scope–不太会翻译这句</span>*）\n\nvar scriptRegex = /<script[^>]*>([\\s\\S]*?)<\\ script="">/gi; function cleanText(dirty) { // Get rid of SCRIPT tags clean = dirty.replace(scriptRegex, \"\"); // Do some more cleaning, maybe whitespace, etc. return clean; }\n\n\n# 委托事件监听 Delegate event listeners\n\n给单独的元素使用事件监听会占用很多内存。如果给动态创建的很多新元素一一绑定事件监听的话代价会非常高。\n\ndocument.querySelector('#todoList li').addEventListener(\"click\", function() { alert(\"Clicked on a task\"); });\n\n如果上面代码中的#todoList里有10000个li元素的话，也就是说会有10000个事件监听器。采用[事件托管](http://davidwalsh.name/event-delegate)的方法可以就可以不用给每个单独的元素使用监听器，而是在这些元素的父节点上使用一个监听器就可以了。上面的例子可以修改成：\n\ndocument.querySelector('#todoList').addEventListener('click', function(e) { if (e.target && e.target.tagName == 'LI') { alert(\"Clicked on a task\"); } });\n\n用jQuery的话更简单了\n\n$(\"#todoList\").on(\"click\", 'li', function() { alert(\"Clicked on a task\"); });\n\n\n# 只需要使用选择器的话，别用jQuery了 Stop using jQuery when you only need selectors\n\n总所周知, jQuery是遍历DEOM的最佳工具。但是如果你的项目只需要使用jQuery进行这一个工作的，就需要慎重权衡下是否值得因为这个需求而加载一个外部库文件。因为使用document.querySelectorAll也可以和使用jQuery一样实现这些基本的选择功能。是的，你没看错，完全可以使用浏览器内置功能实现像document.querySelectorAll(‘.content ul li’)这样的日常选择器操作。你说这样写看起来又长又丑？让我们看一下[Burke Holland](http://flippinawesome.org/2013/05/06/5-things-you-should-stop-doing-with-jquery/)在他的文章[5 Things You Should Stop Doing With jQuery](http://flippinawesome.org/2013/05/06/5-things-you-should-stop-doing-with-jquery/)里的方法：\n\n<div class="\"container\""> <ul> <li id="\"pink\"">Pink</li> <li id="\"salmon\"">Salmon</li> <li id="\"blue\"">Blue</li> <li id="\"green\"">Green</li> <li id="\"red\"">Red</li> </ul> </div> <script> // create a global '$' variable window.$ = function(selector) { return document.querySelector(selector); }; (function() { // select item1 by id and change it's background color to salmon var item = $(\"#salmon\").style.backgroundColor=\"salmon\"; console.log(item); }()); </script>\n\n这样写就可以继续使用你所钟爱的$(‘mySelector’)结构了。\n\n那么querySelectorAll和jQuery的选择器相比究竟有多快呢？这要取决于不同的浏览器，但[至少快5倍](http://jsperf.com/jquery-vs-document-queryselector)！尽管JQuery在document.querySelectorAll方法存在的情况下其实也是会自动调用它来实现选择器，但是我们是不是还要权衡下这多加载的90KB（jquery.mini.js文件）呢？\n\n还想进一步学习么？我推荐进行在Javascript中更高效的进行分析和管理数据结构（profiling and managing data structures efficiently）这方面的学习。我以后可能会围绕这块写一些东西，也可以参考下这篇[文章](http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/)。\n\n本文地址: [http://awebird.com/blog/art/55](http://awebird.com/blog/art/55)\n\n \n","html":"<p>英文原文 <a href="\"http://odiseo.net/javascript/front-end-optimizations-you-can-do-right-now-on-your-existing-code\"">http://odiseo.net/javascript/front-end-optimizations-you-can-do-right-now-on-your-existing-code</a></p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/thumb.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-69="" aligncenter\"="" alt="\"thumb\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/thumb-300x144.jpg\"" width="\"300\"" height="\"144\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/thumb-300x144.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" thumb-500x240.jpg="" 500w,="" thumb.jpg="" 519w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>强烈建议各位Web前端开发人员都要“真正”去<a href="\"http://javascriptissexy.com/16-javascript-concepts-you-must-know-well/\"">学习Javascript</a>并且掌握基本的<a href="\"http://domenlightenment.com/\"">DOM</a>知识。诚然我也不得不赞同，不少基于Javascript特性的小把戏和小技巧根本就不会带来终端用户能明显觉察到的<a href="\"http://ericleads.com/2013/04/youre-optimizing-the-wrong-things/\"">性能提升</a>。话虽如此，我会在这篇文章里分享一些优化技巧，你可以马上在代码里使用这些技巧从而让程序跑的更快。而且从今以后，每当在项目里使用Javascript的时候你都应该想到并实践这些优化。</p>\n<h1>精明的使用选择器 Use selectors wisely<!--more--></h1>\n<p>假设程序里有一个id为#profile-container的div, 你想在其内部选择一个或多个class为myClass的input元素。你可能会很快写出下面这样一个jquery选择器：</p>\n<pre>$(&#039;#profile-container input.myClass&#039;)</pre>\n<p>这句可以满足需求，但并不是最好的方法。事实上，<strong>$(‘#profile-container’).find(‘input.myClass’)</strong>会比上面那句更快。为什么呢？这需要了解下<a href="\"http://blog.bigbinary.com/2010/02/15/how-jquery-selects-elements-using-sizzle.html\"">Jquery选择器机制</a>。首先，$(‘#profile-container’)这个选择器可以很快的获得要选取的部分，这样当使用find()的时候，就会限制在一个很有限的查找范围，从而提升了性能。可以参开<a href="\"http://www.explainjs.com/explain?src=http://code.jquery.com/jquery-1.9.1.js\"">Jquery源码</a>。</p>\n<p>Rob Tarr的<a href="\"http://seesparkbox.com/foundry/jquery_selector_performance_testing\"">文章</a>给出的一些测试结果可以印证这点，他还发现如果链式的使用find()逐层查找会更快，比如<strong>$(‘.container’).find(‘.main’).find(‘ul.list-1′).find(‘li’)</strong></p>\n<p align="\"center\""><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/C9LBtwc.png\""><img 2013="" class="\"alignnone" size-medium="" wp-image-54\"="" alt="\"C9LBtwc.png\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/C9LBtwc-208x300.png\"" width="\"208\"" height="\"300\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/C9LBtwc-208x300.png" 208w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" c9lbtwc.png="" 334w\"="" sizes="\"(max-width:" 208px)="" 100vw,="" 208px\"=""></a></p>\n<p align="\"center\""><em>seesparkbox.com给出的选择器测试比较的结果</em></p>\n<p>另一种精明的使用选择器提高性能的办法就是明确的的声明需要查找的元素类型。比如，如果我们知道要选择的元素类型的话，<strong>$(‘ul.todo’)</strong>明显会比<strong>$(‘.todo’)</strong>快的多。</p>\n<h1>缓存jQuery选择器的结果 Cache jQuery selector results</h1>\n<p>这实际上是一个总所周知的技巧，“不要重复”是经典的提升性能的准则和最佳实践。在Greg Franko精彩的幻灯片“<a href="\"http://gregfranko.com/jquery-best-practices/\"">jQuery最佳实践</a>”里有一个有趣的例子：</p>\n<pre>// Set&#039;s an element&#039;s title attribute using it&#039;s current text\r\n $(&quot;.container input#elem&quot;).attr(&quot;title&quot;, $(&quot;.container input#elem&quot;).text());\r\n// Set&#039;s an element&#039;s text color to red\r\n $(&quot;.container input#elem&quot;).css(&quot;color&quot;, &quot;red&quot;);\r\n// Makes the element fade out\r\n $(&quot;.container input#elem&quot;).fadeOut();</pre>\n<p>问题就在于当我们每次调用<strong>$(“.container input#elem”)</strong>的时候，jQuery都需要使用一次选择器，也就是要遍历一遍所有的DOM。也是就说<strong>“.container input#elem”</strong>这个查找过程要重复执行4次！上面的代码应该修改成下面这样</p>\n<pre>// Stores the live DOM element inside of a variable\r\n var elem = $(&quot;#elem&quot;);\r\n// Set&#039;s an element&#039;s title attribute using it&#039;s current text\r\n elem.attr(&quot;title&quot;, elem.text());\r\n// Set&#039;s an element&#039;s text color to red\r\n elem.css(&quot;color&quot;, &quot;red&quot;);\r\n// Makes the element fade out\r\n elem.fadeOut();</pre>\n<p>注意这里很“抠门”的使用了选择器，因为我们要查找一个id，所以就没有必要去关心这个id是在某个class或者html元素里了。只需要#elem，这样即简单，也更快。</p>\n<h1>缓存.length属性 Cache .length property</h1>\n<p>在Javascript里，每次获取数组的<strong>.length</strong>属性的时候，都需要进行一次运算。因为，对于下面这样一段代码：</p>\n<pre>for (var i = 0; i &amp;lt; myArray.length; i++){...}</pre>\n<p>假设myArray数组大小是10000的话，每次循环计算一次， myArray.length的值就会重复计算10000次。所以你应该按下面这样写：</p>\n<pre>var arrayLength = myArray.length;\r\nfor (var i = 0; i &amp;lt; arrayLength; i++){...}</pre>\n<p>这样，只需要计算一次arrayLength就可以了。</p>\n<p>这个真的这么重要么？其实在现代浏览器中，这两种的区别是<a href="\"http://jsperf.com/caching-array-length/4\"">微乎其微</a>的，因为浏览器引擎已经做了这种优化。那么以后是否就完全不需要考虑这些了么？让我们看一下<a href="\"http://www.ctomczyk.pl/to-cache-or-not-to-cache-length-property/231/\""><strong>comp.lang.javascript新闻组的Thomas Lahn的观点</strong></a>（<span style="\"text-decoration:" line-through;\"="">简单</span>但<span style="\"text-decoration:" line-through;\"="">比较哲学，译不出味道来，先放弃</span>）：</p>\n<blockquote><p>One should never rely on what one cannot know. You cannot know the runtime environments code once written will be exposed to. There is no good reason to assume the value of the “length” property should be automatically cached for a loop in the first place as it could change by statements in the loop.</p>\n<p>One <strong>can</strong> know instead that avoiding to access a property repeatedly whose value does not change, in favor of a local variable that holds this value, reduces code complexity. That has a chance – and it has been showed – to increase runtime efficiency, IOW to be faster. So it is wise to do that.</p></blockquote>\n<h1></h1>\n<h1>最小化DOM操作 Minimize DOM operations</h1>\n<p>写DOM是很“重”的操作。记住：<a href="\"http://ejohn.org/blog/the-dom-is-a-mess/\"">DOM很慢</a>。如果没意识到这点，你早晚会遇到性能问题。下面是一个让浏览器不堪重负的经典案例：</p>\n<pre>var toDoList = $(&quot;#todoList&quot;);\r\nmyTasks.forEach(function(task){\r\n  toDoList.append(&quot;&lt;li id=&quot; + task.index + &quot;&gt;&quot; + task.name + &quot;&lt;/li&gt;&quot;);\r\n});</pre>\n<p>在这里例子里面，我们每次forEach循环都会有读&amp;写DOM的操作。实际上我们可以通过把这些节点存储在一个变量里，等到循环结束以后再一次性的把累积的变量写入DOM，从而规避这种混乱的情况。这样就只需要“附加”操作一次：</p>\n<pre>var toDoList = $(&quot;#todoList&quot;);\r\ndynamicItems = &quot;&quot;;\r\n\r\nmyTasks.forEach(function(task){\r\n  dynamicItems += &quot;&lt;li id=&quot; + index + &quot;&gt;&quot; + value + &quot;&lt;/li&gt;&quot;;\r\n});  \r\ntoDoList.append(dynamicItems);</pre>\n<h1>避免重复创建对象 Avoid repeated object creation</h1>\n<p>如果在函数中创建了一个对象的话，那么这个对象在每次函数调用的时候都会被重复创建一次。这可能并不是你的本意，特别是当这个对象是静态的，你本来没准备在任何情况下改变它的时候。让我们看下<a href="\"http://davidwalsh.name/javascript-optimization\"">David Walsh给出的例子</a>：</p>\n<pre>function cleanText(dirty) {\r\n  // Get rid of SCRIPT tags\r\n  clean = dirty.replace(/&lt;script[^&gt;]*&gt;([\\s\\S]*?)&lt;\\/script&gt;/gi, &quot;&quot;);\r\n\r\n  // Do some more cleaning, maybe whitespace, etc.\r\n\r\n  return clean;\r\n}</pre>\n<p>文字记号<strong>//</strong>实际上是<strong>new RegExp</strong>的缩写形式，也就是说每次使用类似<strong>/ab+c/</strong>这样的语句实际上就同时<a href="\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"">创建了一个正则表达式对象</a>：</p>\n<pre>//both expressions are equivalent\r\nvar re = /ab+c/;\r\nvar re = new RegExp(&quot;ab+c&quot;);</pre>\n<p>在本例中，我们其实并不需要每次都创建一个正则表达式对象。可以像这面这样通过在函数外创建对象，然后在函数中调用（<em><span style="\"text-decoration:" line-through;\"="">through a closure scope&#8211;不太会翻译这句</span></em>）</p>\n<pre>var scriptRegex = /&lt;script[^&gt;]*&gt;([\\s\\S]*?)&lt;\\/script&gt;/gi;\r\nfunction cleanText(dirty) {\r\n  // Get rid of SCRIPT tags\r\n  clean = dirty.replace(scriptRegex, &quot;&quot;);\r\n\r\n  // Do some more cleaning, maybe whitespace, etc.\r\n\r\n  return clean;\r\n}</pre>\n<h1>委托事件监听 Delegate event listeners</h1>\n<p>给单独的元素使用事件监听会占用很多内存。如果给动态创建的很多新元素一一绑定事件监听的话代价会非常高。</p>\n<pre>document.querySelector(&#039;#todoList li&#039;).addEventListener(&quot;click&quot;, function() {\r\n    alert(&quot;Clicked on a task&quot;); \r\n});</pre>\n<p>如果上面代码中的#todoList里有10000个li元素的话，也就是说会有10000个事件监听器。采用<a href="\"http://davidwalsh.name/event-delegate\"">事件托管</a>的方法可以就可以不用给每个单独的元素使用监听器，而是在这些元素的父节点上使用一个监听器就可以了。上面的例子可以修改成：</p>\n<pre>document.querySelector(&#039;#todoList&#039;).addEventListener(&#039;click&#039;, function(e) { \r\n    if (e.target &amp;amp;&amp;amp; e.target.tagName == &#039;LI&#039;) { \r\n        alert(&quot;Clicked on a task&quot;); \r\n    } \r\n});</pre>\n<p>用jQuery的话更简单了</p>\n<pre>$(&quot;#todoList&quot;).on(&quot;click&quot;, &#039;li&#039;, function() {\r\n    alert(&quot;Clicked on a task&quot;); \r\n});</pre>\n<h1>只需要使用选择器的话，别用jQuery了 Stop using jQuery when you only need selectors</h1>\n<p>总所周知, jQuery是遍历DEOM的最佳工具。但是如果你的项目只需要使用jQuery进行这一个工作的，就需要慎重权衡下是否值得因为这个需求而加载一个外部库文件。因为使用document.querySelectorAll也可以和使用jQuery一样实现这些基本的选择功能。是的，你没看错，完全可以使用浏览器内置功能实现像document.querySelectorAll(‘.content ul li’)这样的日常选择器操作。你说这样写看起来又长又丑？让我们看一下<a href="\"http://flippinawesome.org/2013/05/06/5-things-you-should-stop-doing-with-jquery/\"">Burke Holland</a>在他的文章<a href="\"http://flippinawesome.org/2013/05/06/5-things-you-should-stop-doing-with-jquery/\"">5 Things You Should Stop Doing With jQuery</a>里的方法：</p>\n<pre>&lt;div class=&quot;container&quot;&gt;\r\n  &lt;ul&gt;\r\n    &lt;li id=&quot;pink&quot;&gt;Pink&lt;/li&gt;\r\n    &lt;li id=&quot;salmon&quot;&gt;Salmon&lt;/li&gt;\r\n    &lt;li id=&quot;blue&quot;&gt;Blue&lt;/li&gt;\r\n    &lt;li id=&quot;green&quot;&gt;Green&lt;/li&gt;\r\n    &lt;li id=&quot;red&quot;&gt;Red&lt;/li&gt;\r\n  &lt;/ul&gt;  \r\n&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\n  // create a global &#039;$&#039; variable\r\n  window.$ = function(selector) {\r\n    return document.querySelector(selector);\r\n  };\r\n\r\n  (function() {\r\n    // select item1 by id and change it&#039;s background color to salmon\r\n    var item = $(&quot;#salmon&quot;).style.backgroundColor=&quot;salmon&quot;;\r\n    console.log(item);\r\n  }());  \r\n&lt;/script&gt;</pre>\n<p>这样写就可以继续使用你所钟爱的$(‘mySelector’)结构了。</p>\n<p>那么querySelectorAll和jQuery的选择器相比究竟有多快呢？这要取决于不同的浏览器，但<a href="\"http://jsperf.com/jquery-vs-document-queryselector\"">至少快5倍</a>！尽管JQuery在document.querySelectorAll方法存在的情况下其实也是会自动调用它来实现选择器，但是我们是不是还要权衡下这多加载的90KB（jquery.mini.js文件）呢？</p>\n<p>还想进一步学习么？我推荐进行在Javascript中更高效的进行分析和管理数据结构（profiling and managing data structures efficiently）这方面的学习。我以后可能会围绕这块写一些东西，也可以参考下这篇<a href="\"http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/\"">文章</a>。</p>\n<p>本文地址: <a href="\"http://awebird.com/blog/art/55\"">http://awebird.com/blog/art/55</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 11 Jul 2013 22:46:15 +0000","created_by":1,"updated_at":"Fri, 19 Jul 2013 00:31:43 +0000","updated_by":1,"published_at":"Thu, 11 Jul 2013 22:46:15 +0000","published_by":1},{"id":60,"title":"使用svnsync在windows下同步svn版本库来“极速”showlog","slug":"%e4%bd%bf%e7%94%a8subversion%e7%9a%84svnsync%e5%9c%a8windows%e4%b8%8b%e5%90%8c%e6%ad%a5svn%e7%89%88%e6%9c%ac%e5%ba%93%e6%9d%a5showlog","markdown":"\n[![Little_Turtle_Fly_Away](http://awebird.com/blog/wp-content/uploads/2013/07/Little_Turtle_Fly_Away-300x209.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/Little_Turtle_Fly_Away.jpg)\n\n虽然相比如日中天的git来说早已是明日黄花，但由于历史或团队的原因，svn还是目前应用最广泛的版本控制管理工具。随着日积月累的修修改改，我们会越来越倚重于svn的showlog功能来查看某一段代码的修改记录，但是svn的所有历史版本和这些修改记录都存在服务器上，client端只有一个最新update的版本，这样如果处于离线状态或server在内网，还有像我们现在这样开发团队在不同的城市的话，那么showlog的缓慢体验一定很糟糕。这里介绍一个使用subversion的svnsync工具在windows本机同步svn版本库的方法，从此你就可以‘脱机’顺畅的showlog了..\n\n- **安装Subversion**\n\n使用svn的话，你本机一定安装了类似TortoiseSVN这样的客户端工具，但是使用本文的方法，还需要安装subversion，这是windows的SVN服务端工具。可以到下面下载安装，具体过程不再详述\n\n[http://subversion.apache.org/packages.html#windows](http://subversion.apache.org/packages.html#windows)\n\n- **新建一个文件夹用于建立本机的版本库**\n\n比如 E:\\svn_server\\demoProject\n\n- **svnadmin create命令新建版本库**\n\n开始菜单，输入cmd，进入命令行工具\n\nsvnadmin create e:\\svn_server\\demoProject\n\n这时打开demoProject文件夹发现SVN server的目录结构和一些配置文件已经生成\n\n- **<span style="\"line-height:" 15px;\"=""><span style="\"line-height:" 15px;\"="">demoProject/hooks下新建</span></span>pre-revprop-change.bat**\n\n新建一个空文件，然后重命名为pre-revprop-change.bat即可\n\n- **<span style="\"line-height:" 15px;\"="">初始化，与远程svn库关联</span>**\n\n使用的命令如下，注意\n\ne:/svn_server/demoProject     ——————————是本地svn版本库目录，http://211.111.222.333/svn/project/demoProject/  —–是需要同步的项目的远程版本库目录\n\nsvnsync init file:///e:/svn_server/demoProject http://211.111.222.333/svn/project/demoProject/\n\n- **使用svnsync sync同步全量版本到本地**\n\n使用下面的命令，就可以把远程的版本库从0版本到最近版本事无巨细的全部同步下来，甚至包含用户的鉴权信息和所有历史版本。以后使用同样的命令也可以随时用来同步更新至最新版本。如果版本库庞大或者网络不畅，这个过程将持续较长时间，请耐心等待\n\nsvnsync sync file:///e:/svn_server/demoProject\n\n- **客户端Checkout**\n\n这个没什么好说的，就是使用你用来导出或者连接远程svn的客户端，比如TortoiseSVN，建立新文件夹（比如e:/svn_client/demoProject），checkout本地的svn版本库，注意版本库路径使用 file:///e:/svn_server/demoProject 即可，这样以后就可以“极速”showlog所有的历史版本和修改日志了，用来定位问题“狠”方便哦！！！\n\n**【注意】**提醒一下，这个svn_client仅仅用来update和showlog，千万不要commit，否则会破坏同步的本地版本库，如果误操作了的话就需要删掉再把上面的所有步骤重新来过一遍了T-T\n\n原文地址: [http://awebird.com/blog/art/60](http://awebird.com/blog/art/60)\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/Little_Turtle_Fly_Away.jpg\""><img 2013="" class="\"size-medium" wp-image-64="" aligncenter\"="" alt="\"Little_Turtle_Fly_Away\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/Little_Turtle_Fly_Away-300x209.jpg\"" width="\"300\"" height="\"209\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/Little_Turtle_Fly_Away-300x209.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" little_turtle_fly_away.jpg="" 318w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>虽然相比如日中天的git来说早已是明日黄花，但由于历史或团队的原因，svn还是目前应用最广泛的版本控制管理工具。随着日积月累的修修改改，我们会越来越倚重于svn的showlog功能来查看某一段代码的修改记录，但是svn的所有历史版本和这些修改记录都存在服务器上，client端只有一个最新update的版本，这样如果处于离线状态或server在内网，还有像我们现在这样开发团队在不同的城市的话，那么showlog的缓慢体验一定很糟糕。这里介绍一个使用subversion的svnsync工具在windows本机同步svn版本库的方法，从此你就可以‘脱机’顺畅的showlog了..<!--more--></p>\n<ul>\n<li><strong>安装Subversion</strong></li>\n</ul>\n<p>使用svn的话，你本机一定安装了类似TortoiseSVN这样的客户端工具，但是使用本文的方法，还需要安装subversion，这是windows的SVN服务端工具。可以到下面下载安装，具体过程不再详述</p>\n<p><a href="\"http://subversion.apache.org/packages.html#windows\"">http://subversion.apache.org/packages.html#windows</a></p>\n<ul>\n<li><strong>新建一个文件夹用于建立本机的版本库</strong></li>\n</ul>\n<p>比如 E:\\svn_server\\demoProject</p>\n<ul>\n<li><strong>svnadmin create命令新建版本库</strong></li>\n</ul>\n<p>开始菜单，输入cmd，进入命令行工具</p>\n<pre class="\"brush:" shell;="" gutter:="" false\"="">svnadmin create e:\\svn_server\\demoProject</pre>\n<p>这时打开demoProject文件夹发现SVN server的目录结构和一些配置文件已经生成</p>\n<ul>\n<li><strong><span style="\"line-height:" 15px;\"=""><span style="\"line-height:" 15px;\"="">demoProject/hooks下新建</span></span>pre-revprop-change.bat</strong></li>\n</ul>\n<p>新建一个空文件，然后重命名为pre-revprop-change.bat即可</p>\n<ul>\n<li><strong><span style="\"line-height:" 15px;\"="">初始化，与远程svn库关联</span></strong></li>\n</ul>\n<p>使用的命令如下，注意</p>\n<p>e:/svn_server/demoProject     &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;是本地svn版本库目录，http://211.111.222.333/svn/project/demoProject/  &#8212;&#8211;是需要同步的项目的远程版本库目录</p>\n<pre class="\"brush:" bash;="" gutter:="" false\"="">svnsync init file:///e:/svn_server/demoProject http://211.111.222.333/svn/project/demoProject/</pre>\n<ul>\n<li><strong>使用svnsync sync同步全量版本到本地</strong></li>\n</ul>\n<p>使用下面的命令，就可以把远程的版本库从0版本到最近版本事无巨细的全部同步下来，甚至包含用户的鉴权信息和所有历史版本。以后使用同样的命令也可以随时用来同步更新至最新版本。如果版本库庞大或者网络不畅，这个过程将持续较长时间，请耐心等待</p>\n<pre class="\"brush:" bash;="" gutter:="" false\"="">svnsync sync file:///e:/svn_server/demoProject</pre>\n<ul>\n<li><strong>客户端Checkout</strong></li>\n</ul>\n<p>这个没什么好说的，就是使用你用来导出或者连接远程svn的客户端，比如TortoiseSVN，建立新文件夹（比如e:/svn_client/demoProject），checkout本地的svn版本库，注意版本库路径使用 file:///e:/svn_server/demoProject 即可，这样以后就可以“极速”showlog所有的历史版本和修改日志了，用来定位问题“狠”方便哦！！！</p>\n<p><strong>【注意】</strong>提醒一下，这个svn_client仅仅用来update和showlog，千万不要commit，否则会破坏同步的本地版本库，如果误操作了的话就需要删掉再把上面的所有步骤重新来过一遍了T-T</p>\n<p>原文地址: <a href="\"http://awebird.com/blog/art/60\"">http://awebird.com/blog/art/60</a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 14 Jul 2013 23:06:53 +0000","created_by":1,"updated_at":"Thu, 18 Jul 2013 22:02:54 +0000","updated_by":1,"published_at":"Sun, 14 Jul 2013 23:06:53 +0000","published_by":1},{"id":86,"title":"通过修改apache配置文件和HOSTS在本机测试QQ互联登录的方法","slug":"%e9%80%9a%e8%bf%87%e4%bf%ae%e6%94%b9apache%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6%e5%92%8chosts%e5%9c%a8%e6%9c%ac%e6%9c%ba%e6%b5%8b%e8%af%95qq%e4%ba%92%e","markdown":"\n[![manle_qq](http://awebird.com/blog/wp-content/uploads/2013/07/manle_qq-300x111.jpg)](http://awebird.com/blog/wp-content/uploads/2013/07/manle_qq.jpg)\n\n在qq互联登录的开发中会遇到一个很麻烦的问题，就是遇到连不通的情况怎么进行调试？因为qq互联是需要提供网站的信息注册后分配appid等才能使用的，callback参数中需要指定返回到注册网站，简单的说，只有在域名所在网站的“生产环境”或者“现网环境”才能进行调试。如果生产环境不允许开发人员接入或者“流程很繁琐”的话怎么办？本文介绍了通过修改apache配置文件和修改HOSTS进行本机测试qq互联的方法。\n\n假设申请qq互联登录的生产环境的域名是 www.awebird.com\n\n本地的网站根目录（apache）的路径是 C:\\AppServ\\www\\awebird\n\n**（1）修改apache的配置文件**\n\nC:\\AppServ\\Apache2.2\\conf\\httpd.conf (修改前先备份)\n\n<directory \"c:="" appserv="" www\"=""> 和 DocumentRoot \"C:/AppServ/www\"\n\n这两行分别修改为\n\n<directory \"c:="" appserv="" www="" awebird\"=""> 和 DocumentRoot \"C:/AppServ/www/awebird\"\n\n修改完后需要重启apache，如果是appserv集成包的话可以到\n\n开始菜单-所有程序-AppServ-Control Server by Service-Apache Restart 进行重启\n\n**（2）修改HOSTS文件**\n\nC:\\Windows\\System32\\drivers\\etc\\HOSTS\n\n最后增加下面两行并保存\n\n127.0.0.1 awebird.com 127.0.0.1 www.awebird.com\n\n**（3）修改程序的配置文件**\n\n经过如上两步操作之后，可以实验下在浏览器输入www.awebird.com, 就是本机的127.0.0.1/awebird/ 的网站内容，当然对于大部分的系统来说，还需要改一下配置文件，比如C:\\AppServ\\www\\awebird\\config.php中的\n\n$site_url='http://www.awebird.com';\n\n修改为\n\n$site_url='http://127.0.0.1/awebird';\n\n上面的修改和文件夹路径只是举例，请根据实际情况修改\n\n**（4）最后**  \n 经过以上操作，就可以在本机测试qq互联这种需要依赖实际域名的功能了，是不是很方便。  \n 当然，测试完成后不要忘记把上面的都修改回来，否则在本机就无法“真正”的访问到实际域名的数据了\n\n**本文地址：[http://awebird.com/blog/art/86](http://awebird.com/blog/art/86)**\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/07/manle_qq.jpg\""><img 2013="" class="\"size-medium" wp-image-89="" aligncenter\"="" alt="\"manle_qq\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/07/manle_qq-300x111.jpg\"" width="\"300\"" height="\"111\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/07/manle_qq-300x111.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 07="" manle_qq-500x185.jpg="" 500w,="" manle_qq.jpg="" 542w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>在qq互联登录的开发中会遇到一个很麻烦的问题，就是遇到连不通的情况怎么进行调试？因为qq互联是需要提供网站的信息注册后分配appid等才能使用的，callback参数中需要指定返回到注册网站，简单的说，只有在域名所在网站的“生产环境”或者“现网环境”才能进行调试。如果生产环境不允许开发人员接入或者“流程很繁琐”的话怎么办？本文介绍了通过修改apache配置文件和修改HOSTS进行本机测试qq互联的方法。<!--more--></p>\n<p>假设申请qq互联登录的生产环境的域名是 www.awebird.com</p>\n<p>本地的网站根目录（apache）的路径是 C:\\AppServ\\www\\awebird</p>\n<p><strong>（1）修改apache的配置文件</strong></p>\n<p>C:\\AppServ\\Apache2.2\\conf\\httpd.conf (修改前先备份)</p>\n<pre class="\"brush:" text;="" gutter:="" false\"="">&lt;Directory &quot;C:/AppServ/www&quot;&gt;\r\n和\r\nDocumentRoot &quot;C:/AppServ/www&quot;</pre>\n<p>这两行分别修改为</p>\n<pre class="\"brush:" text;="" gutter:="" false\"="">&lt;Directory &quot;C:/AppServ/www/awebird&quot;&gt;\r\n和\r\nDocumentRoot &quot;C:/AppServ/www/awebird&quot;</pre>\n<p>修改完后需要重启apache，如果是appserv集成包的话可以到</p>\n<p>开始菜单-所有程序-AppServ-Control Server by Service-Apache Restart 进行重启</p>\n<p><strong>（2）修改HOSTS文件</strong></p>\n<p>C:\\Windows\\System32\\drivers\\etc\\HOSTS</p>\n<p>最后增加下面两行并保存</p>\n<pre class="\"brush:" text;="" gutter:="" false\"="">127.0.0.1 awebird.com\r\n127.0.0.1 www.awebird.com</pre>\n<p><strong>（3）修改程序的配置文件</strong></p>\n<p>经过如上两步操作之后，可以实验下在浏览器输入www.awebird.com, 就是本机的127.0.0.1/awebird/ 的网站内容，当然对于大部分的系统来说，还需要改一下配置文件，比如C:\\AppServ\\www\\awebird\\config.php中的</p>\n<pre class="\"brush:" text;="" gutter:="" false\"="">$site_url=&#039;http://www.awebird.com&#039;;</pre>\n<p>修改为</p>\n<pre class="\"brush:" text;="" gutter:="" false\"="">$site_url=&#039;http://127.0.0.1/awebird&#039;;</pre>\n<p>上面的修改和文件夹路径只是举例，请根据实际情况修改</p>\n<p><strong>（4）最后</strong><br>\n经过以上操作，就可以在本机测试qq互联这种需要依赖实际域名的功能了，是不是很方便。<br>\n当然，测试完成后不要忘记把上面的都修改回来，否则在本机就无法“真正”的访问到实际域名的数据了</p>\n<p><strong>本文地址：<a href="\"http://awebird.com/blog/art/86\"">http://awebird.com/blog/art/86</a></strong></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 19 Jul 2013 16:12:26 +0000","created_by":1,"updated_at":"Fri, 19 Jul 2013 16:45:29 +0000","updated_by":1,"published_at":"Fri, 19 Jul 2013 16:12:26 +0000","published_by":1},{"id":99,"title":"php curl返回400 bad request的问题定位与解决","slug":"php-curl%e8%bf%94%e5%9b%9e400-bad-request%e7%9a%84%e9%97%ae%e9%a2%98%e5%ae%9a%e4%bd%8d%e4%b8%8e%e8%a7%a3%e5%86%b3","markdown":"\n[![oops](http://awebird.com/blog/wp-content/uploads/2013/08/oops-300x191.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/oops.jpg)\n\n今晚花了整整一晚的时间帮同事定位一个php curl返回400 bad request的问题了，@七夕Orz..\n\n是一个网上流传的模拟登陆163邮箱、获取通信录的代码段[google](https://www.google.com.hk/search?newwindow=1&safe=strict&biw=1313&bih=683&q=curl+163%E9%80%9A%E8%AE%AF%E5%BD%95&oq=curl+163%E9%80%9A%E8%AE%AF%E5%BD%95&gs_l=serp.12...0.0.0.13475.0.0.0.0.0.0.0.0..0.0....0...1c..24.serp..0.0.0.KtevvN3WGFE)，在同事和我的开发机上都运行正常，但是部署到服务器环境上就400了\n\n//跳转 $url = 'http://entry.mail.163.com/coremail/fcg/ntesdoor2?lightweight=1&verifycookie=1&language=-1&style=-1&username=loki_wuxi'; $headers = array('User-Agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/2008052906 Firefox/3.0'); $ch = curl_init($url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HEADER, true); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_HTTPHEADER, $headers); curl_setopt($ch, CURLOPT_COOKIEFILE, COOKIEJAR); curl_setopt($ch, CURLOPT_COOKIEJAR, COOKIEJAR); $result = curl_exec($ch); curl_close($ch);\n\n由于两个开发环境都是windows，服务器环境是linux，所以至少花了一个小时走弯路，在COOKIEJAR文件的路径和权限上。未果\n\n病急乱投医的试遍了网上的各种方案，最后还是沉下心来分析http header，php curl输出完整的request header，需要如下设置\n\n$ch = curl_init($url); curl_setopt($ch, CURLOPT_HEADER, true); curl_setopt($ch, CURLINFO_HEADER_OUT, true); curl_setopt($ch, CURLOPT_NOBODY, true); $result = curl_exec($ch); print_r(curl_getinfo($ch)); curl_close($ch);\n\n对比本机和生产环境的request_header，发现主要区别在于\n\n本机的 Content-Length: 0 Content-Type: application/x-www-form-urlencoded 服务器 Content-Length: -1 Content-Type: application/x-www-form-urlencoded Expect: 100-continue\n\n最终根据这个线索在StackoverFlow上找到这篇[Testing PHP CURL file uploads on laptop (blocked by Norton) ](http://stackoverflow.com/questions/10110573/testing-php-curl-file-uploads-on-laptop-blocked-by-norton)\n\n> It looks like I had curl_setopt($CURL, CURLOPT_POST, TRUE), and that wasn’t a good idea. I removed it, and Norton doesn’t complain and the script works.\n\n把下面这行注释了就ok了，确实在没有CURLOPT_POSTFIELDS的情况下post内容为空，开启CURLOPT_POST没有意义\n\n//curl_setopt($ch, CURLOPT_POST, true);\n\n但是，还是要纠结一下，为什么在本机测试ok了，是不是windows和linux环境的却别？刨根问底的继续查了下，终于找到问题的根源，原来是curl的版本不一样，我本机是libcurl/7.16.0，服务器上是libcurl/7.27.0\n\n详细解释参见\n\n[http://sevalapsha.wordpress.com/2011/08/03/curl-http11-empty-post-bug/](http://sevalapsha.wordpress.com/2011/08/03/curl-http11-empty-post-bug/)\n\n> In the end we discovered that newer version (since 7.20) of cURL interprets missing body as a negotiation request – sends Expect: 100-continue header and Content-Length: -1.\n\ncurl官方的log\n\n[http://curl.haxx.se/changes.html#7_20_0](http://curl.haxx.se/changes.html#7_20_0)\n\n> Fixed in 7.20.0 - February 9 2010 Changes: send Expect: 100-continue for POSTs with unknown sizes\n\n总结一下，就是这些.. (声明下，这篇文章的除了最初同事的代码片之外，所有的引用都是英文，其中一篇还需要自备梯子才能看，这里不是得瑟什么，就是这么个情况，解决问题的有效渠道就是google groups和stackoverflow)\n\n洗洗睡了，某娜快回来了，希望明年七夕不要再解bug.. T-T\n\n**本文地址：[http://awebird.com/blog/art/99](http://awebird.com/blog/art/99)**\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/oops.jpg\""><img 2013="" class="\"size-medium" wp-image-102="" aligncenter\"="" alt="\"oops\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/oops-300x191.jpg\"" width="\"300\"" height="\"191\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/oops-300x191.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" oops.jpg="" 416w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>今晚花了整整一晚的时间帮同事定位一个php curl返回400 bad request的问题了，@七夕Orz..</p>\n<p>是一个网上流传的模拟登陆163邮箱、获取通信录的代码段<a href="\"https://www.google.com.hk/search?newwindow=1&amp;safe=strict&amp;biw=1313&amp;bih=683&amp;q=curl+163%E9%80%9A%E8%AE%AF%E5%BD%95&amp;oq=curl+163%E9%80%9A%E8%AE%AF%E5%BD%95&amp;gs_l=serp.12...0.0.0.13475.0.0.0.0.0.0.0.0..0.0....0...1c..24.serp..0.0.0.KtevvN3WGFE\"" target="\"_blank\"">google</a>，在同事和我的开发机上都运行正常，但是部署到服务器环境上就400了<!--more--></p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">//跳转\r\n\t\t\t$url = &#039;http://entry.mail.163.com/coremail/fcg/ntesdoor2?lightweight=1&amp;verifycookie=1&amp;language=-1&amp;style=-1&amp;username=loki_wuxi&#039;;\r\n\t\t\t$headers = array(&#039;User-Agent&#039; =&gt;\r\n\t\t\t\t&#039;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/2008052906 Firefox/3.0&#039;);\r\n\r\n\t\t\t$ch = curl_init($url);\r\n\t\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\r\n\t\t\tcurl_setopt($ch, CURLOPT_HEADER, true);\r\n\t\t\tcurl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 120);\r\n\t\t\tcurl_setopt($ch, CURLOPT_POST, true);\r\n\t\t\tcurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\r\n\t\t\tcurl_setopt($ch, CURLOPT_COOKIEFILE, COOKIEJAR);\r\n\t\t\tcurl_setopt($ch, CURLOPT_COOKIEJAR, COOKIEJAR);\r\n\t\t\t$result = curl_exec($ch);\r\n\t\t\tcurl_close($ch);</pre>\n<p>由于两个开发环境都是windows，服务器环境是linux，所以至少花了一个小时走弯路，在COOKIEJAR文件的路径和权限上。未果</p>\n<p>病急乱投医的试遍了网上的各种方案，最后还是沉下心来分析http header，php curl输出完整的request header，需要如下设置</p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">$ch = curl_init($url);\r\ncurl_setopt($ch, CURLOPT_HEADER, true);\r\ncurl_setopt($ch, CURLINFO_HEADER_OUT, true);\r\ncurl_setopt($ch, CURLOPT_NOBODY, true);\r\n$result = curl_exec($ch);\r\nprint_r(curl_getinfo($ch));\r\ncurl_close($ch);</pre>\n<p>对比本机和生产环境的request_header，发现主要区别在于</p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">本机的  Content-Length: 0 Content-Type: application/x-www-form-urlencoded\r\n服务器  Content-Length: -1 Content-Type: application/x-www-form-urlencoded  Expect: 100-continue</pre>\n<p>最终根据这个线索在StackoverFlow上找到这篇<a href="\"http://stackoverflow.com/questions/10110573/testing-php-curl-file-uploads-on-laptop-blocked-by-norton\"" target="\"_blank\"">Testing PHP CURL file uploads on laptop (blocked by Norton) </a></p>\n<blockquote><p>It looks like I had curl_setopt($CURL, CURLOPT_POST, TRUE), and that wasn&#8217;t a good idea. I removed it, and Norton doesn&#8217;t complain and the script works.</p></blockquote>\n<p>把下面这行注释了就ok了，确实在没有CURLOPT_POSTFIELDS的情况下post内容为空，开启CURLOPT_POST没有意义</p>\n<pre class="\"brush:" php;="" gutter:="" false\"="">//curl_setopt($ch, CURLOPT_POST, true);</pre>\n<p>但是，还是要纠结一下，为什么在本机测试ok了，是不是windows和linux环境的却别？刨根问底的继续查了下，终于找到问题的根源，原来是curl的版本不一样，我本机是libcurl/7.16.0，服务器上是libcurl/7.27.0</p>\n<p>详细解释参见</p>\n<p><a href="\"http://sevalapsha.wordpress.com/2011/08/03/curl-http11-empty-post-bug/\"">http://sevalapsha.wordpress.com/2011/08/03/curl-http11-empty-post-bug/</a></p>\n<blockquote>\n<pre>In the end we discovered that newer version (since 7.20) of cURL interprets missing body as a negotiation request – sends Expect: 100-continue header and Content-Length: -1.</pre>\n</blockquote>\n<p>curl官方的log</p>\n<p><a href="\"http://curl.haxx.se/changes.html#7_20_0\"">http://curl.haxx.se/changes.html#7_20_0</a></p>\n<blockquote>\n<pre>Fixed in 7.20.0 - February 9 2010\r\nChanges:\r\nsend Expect: 100-continue for POSTs with unknown sizes</pre>\n</blockquote>\n<p>总结一下，就是这些.. (声明下，这篇文章的除了最初同事的代码片之外，所有的引用都是英文，其中一篇还需要自备梯子才能看，这里不是得瑟什么，就是这么个情况，解决问题的有效渠道就是google groups和stackoverflow)</p>\n<p>洗洗睡了，某娜快回来了，希望明年七夕不要再解bug.. T-T</p>\n<p><strong>本文地址：<a href="\"http://awebird.com/blog/art/99\"" target="\"_blank\"">http://awebird.com/blog/art/99</a></strong></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 14 Aug 2013 00:21:19 +0000","created_by":1,"updated_at":"Sun, 08 Dec 2013 19:47:21 +0000","updated_by":1,"published_at":"Wed, 14 Aug 2013 00:21:19 +0000","published_by":1},{"id":108,"title":"使用fiddler将网站上的css js重定向至本地文件，进行在线调试","slug":"%e4%bd%bf%e7%94%a8fiddler%e5%b0%86%e7%bd%91%e7%ab%99%e4%b8%8a%e7%9a%84css-js%e9%87%8d%e5%ae%9a%e5%90%91%e8%87%b3%e6%9c%ac%e5%9c%b0%e6%96%87%e4%bb%b6%e","markdown":"\n[![8](http://awebird.com/blog/wp-content/uploads/2013/08/8-300x88.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/8.jpg)\n\n这是一篇写给公司负责切图和调样式的前端的文章。主要适用于一个项目临时需要调整下css或者js，为了一点修改让前端人员在本机搭建完整的LAMP环境，导入DB数据，确实很不方便，特别是像我们这样前后端在地理上就分离在两个城市的团队。这里是使用强大的Fiddler2，以修改[本博客](http://awebird.com/blog/)网站的云标签插件的样式为例。\n\n[![cloudtag1](http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag1.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag1.jpg)\n\n**1. 下载安装fiddler2，点击运行**\n\n[http://fiddler2.com/get-fiddler](http://fiddler2.com/get-fiddler) 一般选择fiddler2就可以了\n\n**2. 在浏览器打开需要调试的页面**，比如，如果有浏览器缓存，可以ctrl+F5强制刷新获取最新版本\n\n任一浏览器打开[http://www.awebird.com/blog/](http://www.awebird.com/blog/)，这也是fiddler相对firebug和chrome开发工具的一个优势，它是与浏览器无关，IE甚至opera mobile emulator这种手机模拟器都可以。注意浏览器如果有代理插件的话，fiddler可能检测不到，比如chrome的SwitchSharp，需要选择“使用系统代理设置”\n\n**3. 进行上一步的时候，发现fiddler2中已经有一串串优美的http请求和回应呈现出来了，请选中准备调试的文件** 这里很容易辨别出是下图这个cirrusCloud.css，（如果你不洁身自好的装了360之类的“安全软件”，还能时不时发现自己的隐私数据是怎么被悄悄上传的）\n\n[![cloudtag2](http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag2-300x81.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag2.jpg)\n\n有两个地方要注意下\n\n- 调试过程中不断修改js css上传到服务器，重新进入或者刷新页面很有可能使用的是浏览器的旧的缓存版本，这个时候应该先清下缓存，或者多按几次ctrl+F5强制刷新。看到上面的http result是200的话说明是从服务器获取的最新版本\n- 一般来说服务器端会对js css进行gzip压缩传输，这种情况下，可以点击右侧的黄色提示条解压后就可以看到文本的css内容了\n\n[![3](http://awebird.com/blog/wp-content/uploads/2013/08/3-300x184.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/3.jpg)\n\n**4. 在右侧的的AutoResponder选项卡选中 下图所示的两项，点击 Add Rule**\n\n[![4](http://awebird.com/blog/wp-content/uploads/2013/08/4-300x113.png)](http://awebird.com/blog/wp-content/uploads/2013/08/4.png)\n\n**5. 在右下侧的Rule Editor选择“find a file”, 弹出文件选择器，定位到svn本地目录下的相应css文件**\n\n（这里是指开发方式，可以直接定位到svn或者git的client文件夹的对应css文件），这里其实就是一个重定向，当网页渲染请求服务器上的[http://awebird.com/blog/wp-content/themes/twentytwelve/style.css?ver=3.6](http://awebird.com/blog/wp-content/themes/twentytwelve/style.css?ver=3.6)文件时根据这里的设置被重定向到本地的文件（如果本机没有，也可以根据上面的链接直接从服务器下载再重定向，也可以在fiddler邮件save and open as local file），比如C:\\AppServ\\www\\myblog\\cirrusCloud.css\n\n[![4](http://awebird.com/blog/wp-content/uploads/2013/08/41-300x106.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/41.jpg)\n\n在右上窗口看到新增了一条记录就是服务器到本机的重定向映射规则，以后可以随时添加和删除这些规则\n\n[![5](http://awebird.com/blog/wp-content/uploads/2013/08/5-300x75.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/5.jpg)\n\n**6. 经过上面的操作就可以实现修改本机的css文件，调试浏览器里远程环境的效果了**\n\n比如在css中加入如下两条\n\n#cirrusCloudWidget a{ color:green; } #cirrusCloudWidget a:hover{ border: 1px solid red; color:red; }\n\n刷新页面，可以看到云标签的字体变成绿色，被选中的标签变成红色\n\n[![6](http://awebird.com/blog/wp-content/uploads/2013/08/6.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/6.jpg)\n\n**7. 就是这么简单**\n\n注意，你的修改并没有真的上传到服务器，别人访问网站看到的还是灰色的标签，如果本地映射的就是版本库的话，这时就可以svn commit或者git push，然后等运维更新到服务器环境就可以了。\n\n**本文地址：[http://awebird.com/blog/art/108/](http://awebird.com/blog/art/108)  \n**\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/8.jpg\""><img 2013="" class="\"size-medium" wp-image-118="" aligncenter\"="" alt="\"8\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/8-300x88.jpg\"" width="\"300\"" height="\"88\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/8-300x88.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" 8-624x184.jpg="" 624w,="" 8.jpg="" 643w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>这是一篇写给公司负责切图和调样式的前端的文章。主要适用于一个项目临时需要调整下css或者js，为了一点修改让前端人员在本机搭建完整的LAMP环境，导入DB数据，确实很不方便，特别是像我们这样前后端在地理上就分离在两个城市的团队。这里是使用强大的Fiddler2，以修改<a href="\"http://awebird.com/blog/\"">本博客</a>网站的云标签插件的样式为例。<!--more--></p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag1.jpg\""><img class="\"alignnone" size-full="" wp-image-109\"="" alt="\"cloudtag1\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag1.jpg\"" width="\"176\"" height="\"134\""></a></p>\n<p><strong>1. 下载安装fiddler2，点击运行</strong></p>\n<p><a href="\"http://fiddler2.com/get-fiddler\"">http://fiddler2.com/get-fiddler</a> 一般选择fiddler2就可以了</p>\n<p><strong>2. 在浏览器打开需要调试的页面</strong>，比如，如果有浏览器缓存，可以ctrl+F5强制刷新获取最新版本</p>\n<p>任一浏览器打开<a href="\"http://www.awebird.com/blog/\"">http://www.awebird.com/blog/</a>，这也是fiddler相对firebug和chrome开发工具的一个优势，它是与浏览器无关，IE甚至opera mobile emulator这种手机模拟器都可以。注意浏览器如果有代理插件的话，fiddler可能检测不到，比如chrome的SwitchSharp，需要选择“使用系统代理设置”</p>\n<p><strong>3. 进行上一步的时候，发现fiddler2中已经有一串串优美的http请求和回应呈现出来了，请选中准备调试的文件</strong> 这里很容易辨别出是下图这个cirrusCloud.css，（如果你不洁身自好的装了360之类的“安全软件”，还能时不时发现自己的隐私数据是怎么被悄悄上传的）</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag2.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-110\"="" alt="\"cloudtag2\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag2-300x81.jpg\"" width="\"300\"" height="\"81\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/cloudtag2-300x81.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" cloudtag2-624x169.jpg="" 624w,="" cloudtag2.jpg="" 668w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>有两个地方要注意下</p>\n<ul>\n<li>调试过程中不断修改js css上传到服务器，重新进入或者刷新页面很有可能使用的是浏览器的旧的缓存版本，这个时候应该先清下缓存，或者多按几次ctrl+F5强制刷新。看到上面的http result是200的话说明是从服务器获取的最新版本</li>\n<li>一般来说服务器端会对js css进行gzip压缩传输，这种情况下，可以点击右侧的黄色提示条解压后就可以看到文本的css内容了</li>\n</ul>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/3.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-111\"="" alt="\"3\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/3-300x184.jpg\"" width="\"300\"" height="\"184\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/3-300x184.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" 3.jpg="" 476w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p><strong>4. 在右侧的的AutoResponder选项卡选中 下图所示的两项，点击 Add Rule</strong></p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/4.png\""><img 2013="" class="\"alignnone" size-medium="" wp-image-112\"="" alt="\"4\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/4-300x113.png\"" width="\"300\"" height="\"113\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/4-300x113.png" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" 4.png="" 427w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p><strong>5. 在右下侧的Rule Editor选择“find a file”, 弹出文件选择器，定位到svn本地目录下的相应css文件</strong></p>\n<p>（这里是指开发方式，可以直接定位到svn或者git的client文件夹的对应css文件），这里其实就是一个重定向，当网页渲染请求服务器上的<a href="\"http://awebird.com/blog/wp-content/themes/twentytwelve/style.css?ver=3.6\"">http://awebird.com/blog/wp-content/themes/twentytwelve/style.css?ver=3.6</a>文件时根据这里的设置被重定向到本地的文件（如果本机没有，也可以根据上面的链接直接从服务器下载再重定向，也可以在fiddler邮件save and open as local file），比如C:\\AppServ\\www\\myblog\\cirrusCloud.css</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/41.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-114\"="" alt="\"4\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/41-300x106.jpg\"" width="\"300\"" height="\"106\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/41-300x106.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" 41.jpg="" 451w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>在右上窗口看到新增了一条记录就是服务器到本机的重定向映射规则，以后可以随时添加和删除这些规则</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/5.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-115\"="" alt="\"5\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/5-300x75.jpg\"" width="\"300\"" height="\"75\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/5-300x75.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" 5.jpg="" 600w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p><strong>6. 经过上面的操作就可以实现修改本机的css文件，调试浏览器里远程环境的效果了</strong></p>\n<p>比如在css中加入如下两条</p>\n<pre>#cirrusCloudWidget a{\r\n    color:green;\r\n}\r\n\r\n#cirrusCloudWidget a:hover{\r\n    border: 1px solid red;\r\n    color:red;\r\n}</pre>\n<p>刷新页面，可以看到云标签的字体变成绿色，被选中的标签变成红色</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/6.jpg\""><img class="\"alignnone" size-full="" wp-image-116\"="" alt="\"6\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/6.jpg\"" width="\"179\"" height="\"119\""></a></p>\n<p><strong>7. 就是这么简单</strong></p>\n<p>注意，你的修改并没有真的上传到服务器，别人访问网站看到的还是灰色的标签，如果本地映射的就是版本库的话，这时就可以svn commit或者git push，然后等运维更新到服务器环境就可以了。</p>\n<p><strong>本文地址：<a href="\"http://awebird.com/blog/art/108\"" target="\"_blank\"">http://awebird.com/blog/art/108/</a><br>\n</strong></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 20 Aug 2013 21:12:43 +0000","created_by":1,"updated_at":"Tue, 20 Aug 2013 21:19:54 +0000","updated_by":1,"published_at":"Tue, 20 Aug 2013 21:12:43 +0000","published_by":1},{"id":122,"title":"基于Android Webview的Hybrid App开发的前端优化","slug":"%e5%9f%ba%e4%ba%8eandroid-webview%e7%9a%84hyper-app%e5%bc%80%e5%8f%91%e7%9a%84%e5%89%8d%e7%ab%af%e4%bc%98%e5%8c%96","markdown":"\n[![webview](http://awebird.com/blog/wp-content/uploads/2013/08/webview-300x102.jpg)](http://awebird.com/blog/wp-content/uploads/2013/08/webview.jpg)\n\n<span style="\"line-height:" 1.714285714;="" font-size:="" 1rem;\"="">最近做一个项目，是将一个相对复杂（内容后台模块化配置）的mobile web页面嵌入到Android的webview展示，把遇到的问题和一些经验总结下</span>\n\n**（1）图片！图片！图片！**\n\n我觉得不管是原生App还是Web App，加载优化的第一条就是合理的设置图片，这点往往容易被忽视。一切只在WIFI环境下的测试都是耍流氓！\n\n这个项目的主页面，一开始前端负责切图的同事给出的静态页居然有1M多，其中最大的一张banner图接近300K! 直接从PSD切出来的高保真原汁原味的展示效果确实震撼，百分比布局下，在chrome放到全屏显示还是清晰无比。理想很丰满，现实却骨感，可惜我们不是生活在Provo，没有google fiber的情况下只能忍痛牺牲这种“网络不能承受之美”。wap页面就是手机上看的，一般4~5寸屏幕能清晰显示，6寸‘巨屏’牺牲点效果不影响使用就足够了。\n\n目前总结大致的图片组成\n\n- 横铺图片，大概占全屏的1/5~1/4左右的图片，建议30K左右\n- 橱窗图，宽度1/4~1/2方图，8~15K\n- 加载占位图、loading动画 单色，质量调低，1.5K\n- 多个小图片，最好合成一张用css sprite布局，webview里的http请求很慢，能省则省\n- 什么时代了，一般的渐变 圆角样式能用css3就一定不能老土再用图片了！\n- 一些小图，可以base64成字符串，用css data:image保存（这个持保留意见，不直观，而且增加了css文件的体积，这种字串一般gzip压缩也不会变小多少）\n\n**（2）使用zepto.js代替jquery**\n\n或许你是javascript大牛建议一切用原生，但是简单的选择器和DOM操作肯定没有问题，何况手机上不用可以把大量IE兼容的代码直接忽略（暗爽）。但是真正做webapp，稍微复杂点还是需要使用一些插件，每个功能都用野生js重写，难度和稳健性先不说，代码也会越来越臃肿难以维护。（野生Javascript怎么也称不上优雅）\n\n那么为什么强烈建议用zepto.js代替jquery呢，这可绝不仅仅因为gzip后差别20K的文件体积，而是因为Android Webview奇葩的js解析效率和更奇葩的onPageFinished事件，总之一旦用了jquery，页面的白屏loading肯定会多滚很多圈，宝贵的加载时间浪费在一个个用不到的函数对象的建立和兼容判断语句里了。\n\n而用zepto.js可以有明显的改善，而且基本的选择器、DOM操作、ajax，写起来和jquery是完全一样的，无痛迁移，个别插件不兼容，往往也只需要把最后闭包外的(jQuery)改成($,window,document)就可以了。常用的插件一般也可以在github上找到zepto.js compatible version\n\n**（3）先载入DOM，延时加载和执行js**\n\n奇怪，这不就是$(document).ready和window.onload的却别么？糊弄谁呢\n\n但确实不是这么简单，主要原因就在于Android Webview的onPageFinished事件，Android端一般是用这个事件来标识页面加载完成并显示的，也就是说在此之前，会一直loading，但是\n\nAndroid的OnPageFinished事件会在Javascript脚本执行完成之后才会触发。如果在页面中使用JQuery，会在处理完DOM对象，执行完$(document).ready(function() {});事件自会后才会渲染并显示页面。（参见 [http://hi.baidu.com/goldchocobo/item/9f7b0639f3cd2efe96f88dfb](http://hi.baidu.com/goldchocobo/item/9f7b0639f3cd2efe96f88dfb)）这篇文章。文中使用的lazyload.js已经有了版本更新，语法也发生了变化，这样用即可\n\n<script src="\"js/lazyload.min.js\""></script> <script> function loadComplete(){ //do something } //针对Android webview渲染js慢的问题，延时加载 function loadscript(){ LazyLoad.js([ 'js/zepto.min.js', 'js/jquery.lazyload.min.js', 'js/mustache.js', 'js/flowtype.js' ], loadComplete); } setTimeout(loadscript,10); </script>\n\n这里的关键就是setTimeout(loadscript,10)，这个语句就是Webview里页面加载显示和载入和执行其它js和页面渲染事件的分水岭。把原来放在$(document).ready里面的主体程序放在loadComplete里面就行了。\n\n经过测试，这个对包含复杂js的页面在webview中加载的提升最明显，如果你的页面一直在傻乎乎的loading loading loading.. 最好试一下这个办法。\n\n不过我们的主体页面初始什么内容都没有，所有DOM都需要mustache根据api的配置，从模板中render，所以Android交了兵权之后还要在页面上空白或者显示自定义的loading图一小会，不过绝对比之前那种体验要明显快的多（大概15秒=>5秒的样子）。\n\n**（4）图片懒加载**\n\n原因还是因为不在Provo，注意此lazyload非彼lazyload，这里是jquery.lazyload，小改动就可以支持zepto.js\n\n这个插件很常见，最好还是去github主页[https://github.com/tuupola/jquery_lazyload/](https://github.com/tuupola/jquery_lazyload/)看用法，手机上调用的时候最好加上 threshold:300，否则滚动，由占位图加载的等待时间还是有点明显。\n\n如果滚动加载失效（找不到原因），可以试试在lazyload之后加一条\n\n$(window).trigger(\"scroll\");\n\n就可以了。另外lazyload占位图虽然小，但是最好能提前加载到缓存，这样页面显示的时候高度不会突变，把不同宽高比的占位图放在不显示即可\n\n<img src="\"upload/images/other/load_full.jpg\"" style="\"display:none;\""> <img src="\"upload/images/other/load_half.jpg\"" style="\"display:none;\"">\n\n**（5）使用LocalStorage缓存DOM**\n\n如果你的页面主体和我们这次一样，初始的DOM只有一个loading甚至空白，所有的内容都需要api获取接口数据，然后根据模板（比如mustache.js）render之后在append到DOM里的话，那么不管怎么优化，每次还都是需要等待那么一会儿，api请求接收和js模板引擎的处理在webview上都明显的慢。\n\n而有些页面虽然需要后台配置，但并不是那么动态，像一个商城的首页这种，即使前端显示更新不那么即时，也不是很大的问题，刷新或者下次进入再显示最新版本也可以接受甚至是更好的用户体验。\n\n我们这里把第一次mustache render好的html块，存入LocalStorage，然后下次进入页面的时候，先直接从LocalStorage中读取并显示，api读取和模板渲染后的新DOM再更新到LocaStorage中（如果有必要，可以在这个时候，比较下新旧是否相同，不同再更新一次DOM）\n\nfunction jq_lazyload(){ $(\"div#page_all img.lazy\").lazyload({threshold:300, load : function(e){$(this).next('b').hide();$(this).removeClass('lazy');}}); $(window).trigger(\"scroll\"); } function loadComplete(){ //omit ... //如果用localstorage则先lazyload img if(window.localStorage){ if(localStorage.getItem('dom_all')){ jq_lazyload(); } } $.ajax({ url:server_url, dataType:\"json\", type:\"GET\", success:function(json){ var dom_all=\"\"; for(var i=0; i<json.floors.length; i++){="" var="" style_this="json.floors[i].style;" dom_all+="Mustache.render($('#floor_tpl_'+style_this).html()," json.floors[i]);="" }="" if(!window.localstorage="" ||="" !localstorage.getitem('dom_all')){="" document.getelementbyid(\"page_all\").innerhtml="dom_all;" jq_lazyload();="" localstorage.setitem('dom_all',encodeuricomponent(dom_all));="" dom_all="null;" 释放内存="" });="" function="" loadscript(){="" if(window.localstorage){="" if(localstorage.getitem('dom_all')){="" lazyload.js([="" 'js="" zepto.min.js',="" jquery.lazyload.min.js',="" mustache.js',="" flowtype.js'="" ],="" loadcomplete);="" settimeout(loadscript,10);="" 处理webview未lazyload完，进入其它页面，js中止，返回不执行="" window.ontouchstart="function(e){" }\n\n**（6）webview的设置**\n\nwebview本身的设置也很重要，特别是cache和localstorage是否开始，是否app退出再进入就不存在了，各自空间有多大，这些需要和android开发的同事沟通好，说不定就是一行参数设置，体验就大不同\n\n-="" **cache开启和设置**\n\n="" 下面3个是跟浏览器缓存cache相关的，一个页面的="" 图片\\js\\css="" 载入过之后="" \n="" 在服务器设置的文件有效期内，每次请求，会去服务器检查文件最后修改时间，如果一致，不会重新下载，而是使用缓存\n\nbrowser.getsettings().setappcacheenabled(true);="" browser.getsettings().setappcachepath(\"="" data="" [com.packagename]="" cache\");="" browser.getsettings().setappcachemaxsize(5*1024*1024);="" 5mb\n\n-="" **localstorage相关设置**\n\n="" 下面是跟浏览的localstorage有关的，像首页的dom，第一次载入，需要从服务器ajax请求接口json配置数据，然后用js从模板中渲染拼接成dom，显示在页面中="" 由于android　webview的js处理很慢，这里把第一次渲染后的dom存入localstorage中，以后打开页面不用请求api和js渲染，优先加载页面，和cache配置，速度会快很多="" 但是android　webview的localstorage有个问题，关闭app或者重启后，就清楚了，所以需要下面browser.getsettings().setdatabase相关的操作，把localstoarge存到db中\n\nbrowser.getsettings().setdatabaseenabled(true);="" browser.getsettings().setdomstorageenabled(true);="" string="" databasepath="browser.getContext().getDir(\"databases\"," context.mode_private).getpath();="" browser.getsettings().setdatabasepath(databasepath);="" mywebview.setwebchromeclient(new="" webchromeclient(){="" 　　　="" @override="" public="" void="" onexceededdatabasequota(string="" url,="" databaseidentifier,="" long="" currentquota,="" estimatedsize,="" totalusedquota,="" webstorage.quotaupdater="" quotaupdater)="" {="" 　　　　　　　="" quotaupdater.updatequota(estimatedsize="" *="" 2);="" }\n\n-="" **浏览器自带缩放按钮取消显示**\n\n="" 这个是跟浏览器的页面缩放相关，不用显示浏览器的放大缩小按钮，这个一般在最下面出现，体验不好\n\nbrowser.getsettings().setbuiltinzoomcontrols(false);\n\n**（7）服务器端设置="" gzip="" etag="" cache-control**\n\ngzip就不说了，总之一定要开启html="" css="" js="" json的gzip压缩！！！\n\n为了弄明白这个，非科班出身的我连着fiddler边调测边翻了小半本<计算机网络="">的书，其实也还没完全弄明白。而且测试发现现在的浏览器特别是桌面的360(#Anti-360#)和一些国产手机浏览器，为了制造“极速”的假象，缓存处理很多地方都没有按照规范来，动不动就会过度缓存，导致页面不能及时更新。Android Webview的LOAD_CACHE_ELSE_NETWORK设置更是完全无视etag、expire time这些，强制使用缓存。\n\n总之，这块还没完全弄明白，等后面彻底明白了再结合fiddler和apache总结下吧。给出我这边apache .htaccess相关配置\n\n<ifmodule mod_deflate.c=""> AddOutputFilter DEFLATE html xml php js css json </ifmodule> <ifmodule mod_headers.c=""> <filesmatch \"\\\\.(ico|jpe?g|bmp|png|gif|swf|css|js|json)$\"=""> Header set Cache-Control \"max-age=2692000, public\" </filesmatch> <filesmatch \"\\\\.(php|html)$\"=""> Header set Cache-Control \"max-age=60, private, must-revalidate\" </filesmatch> Header unset ETag </ifmodule>\n\n**（8）以上都不是**\n\n其实Hybrid App的最佳实践，还是应该把所有的html css js和主要的图片资源离线存储在Android的asset文件夹下，然后由Android实现从服务器端到手机的这个www主文件夹的更新机制，这样才不用凡事从server端下载(很多人讨论webapp时只大谈特谈性能，其实一切需要加载的实现方式才是最大的“阻塞”)。这样也可以随心所欲的使用一些Sencha Touch或AngularJS+UI这样的中型和重型框架，可惜上面提到的文件更新机制没有建立，暂时还没有机会实践这种模式。这种想法的文章不多，参考[http://developer.appcelerator.com/question/146564/update-apps-local-html-webviewed-files](http://developer.appcelerator.com/question/146564/update-apps-local-html-webviewed-files)的reply部分\n\n就到这里吧…\n\n**本文地址：[http://awebird.com/blog/art/122/](http://awebird.com/blog/art/122)**\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/08/webview.jpg\""><img 2013="" class="\"size-medium" wp-image-130="" aligncenter\"="" alt="\"webview\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/08/webview-300x102.jpg\"" width="\"300\"" height="\"102\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/08/webview-300x102.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 08="" webview.jpg="" 376w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p><span style="\"line-height:" 1.714285714;="" font-size:="" 1rem;\"="">最近做一个项目，是将一个相对复杂（内容后台模块化配置）的mobile web页面嵌入到Android的webview展示，把遇到的问题和一些经验总结下<!--more--></span></p>\n<p><strong>（1）图片！图片！图片！</strong></p>\n<p>我觉得不管是原生App还是Web App，加载优化的第一条就是合理的设置图片，这点往往容易被忽视。一切只在WIFI环境下的测试都是耍流氓！</p>\n<p>这个项目的主页面，一开始前端负责切图的同事给出的静态页居然有1M多，其中最大的一张banner图接近300K! 直接从PSD切出来的高保真原汁原味的展示效果确实震撼，百分比布局下，在chrome放到全屏显示还是清晰无比。理想很丰满，现实却骨感，可惜我们不是生活在Provo，没有google fiber的情况下只能忍痛牺牲这种“网络不能承受之美”。wap页面就是手机上看的，一般4~5寸屏幕能清晰显示，6寸‘巨屏’牺牲点效果不影响使用就足够了。</p>\n<p>目前总结大致的图片组成</p>\n<ul>\n<li>横铺图片，大概占全屏的1/5~1/4左右的图片，建议30K左右</li>\n<li>橱窗图，宽度1/4~1/2方图，8~15K</li>\n<li>加载占位图、loading动画 单色，质量调低，1.5K</li>\n<li>多个小图片，最好合成一张用css sprite布局，webview里的http请求很慢，能省则省</li>\n<li>什么时代了，一般的渐变 圆角样式能用css3就一定不能老土再用图片了！</li>\n<li>一些小图，可以base64成字符串，用css data:image保存（这个持保留意见，不直观，而且增加了css文件的体积，这种字串一般gzip压缩也不会变小多少）</li>\n</ul>\n<p><strong>（2）使用zepto.js代替jquery</strong></p>\n<p>或许你是javascript大牛建议一切用原生，但是简单的选择器和DOM操作肯定没有问题，何况手机上不用可以把大量IE兼容的代码直接忽略（暗爽）。但是真正做webapp，稍微复杂点还是需要使用一些插件，每个功能都用野生js重写，难度和稳健性先不说，代码也会越来越臃肿难以维护。（野生Javascript怎么也称不上优雅）</p>\n<p>那么为什么强烈建议用zepto.js代替jquery呢，这可绝不仅仅因为gzip后差别20K的文件体积，而是因为Android Webview奇葩的js解析效率和更奇葩的onPageFinished事件，总之一旦用了jquery，页面的白屏loading肯定会多滚很多圈，宝贵的加载时间浪费在一个个用不到的函数对象的建立和兼容判断语句里了。</p>\n<p>而用zepto.js可以有明显的改善，而且基本的选择器、DOM操作、ajax，写起来和jquery是完全一样的，无痛迁移，个别插件不兼容，往往也只需要把最后闭包外的(jQuery)改成($,window,document)就可以了。常用的插件一般也可以在github上找到zepto.js compatible version</p>\n<p><strong>（3）先载入DOM，延时加载和执行js</strong></p>\n<p>奇怪，这不就是$(document).ready和window.onload的却别么？糊弄谁呢</p>\n<p>但确实不是这么简单，主要原因就在于Android Webview的onPageFinished事件，Android端一般是用这个事件来标识页面加载完成并显示的，也就是说在此之前，会一直loading，但是</p>\n<p>Android的OnPageFinished事件会在Javascript脚本执行完成之后才会触发。如果在页面中使用JQuery，会在处理完DOM对象，执行完$(document).ready(function() {});事件自会后才会渲染并显示页面。（参见 <a href="\"http://hi.baidu.com/goldchocobo/item/9f7b0639f3cd2efe96f88dfb\"">http://hi.baidu.com/goldchocobo/item/9f7b0639f3cd2efe96f88dfb</a>）这篇文章。文中使用的lazyload.js已经有了版本更新，语法也发生了变化，这样用即可</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">&lt;script src=&quot;js/lazyload.min.js&quot;&gt;&lt;/script&gt;\r\n&lt;script&gt;\r\nfunction loadComplete(){\r\n\t//do something\r\n}\r\n\r\n//针对Android webview渲染js慢的问题，延时加载\r\nfunction loadscript(){\r\n        LazyLoad.js([\r\n         &#039;js/zepto.min.js&#039;,\r\n         &#039;js/jquery.lazyload.min.js&#039;,  \r\n         &#039;js/mustache.js&#039;,\r\n         &#039;js/flowtype.js&#039;\r\n        ], loadComplete);\r\n}\r\nsetTimeout(loadscript,10);\r\n&lt;/script&gt;</pre>\n<p>这里的关键就是setTimeout(loadscript,10)，这个语句就是Webview里页面加载显示和载入和执行其它js和页面渲染事件的分水岭。把原来放在$(document).ready里面的主体程序放在loadComplete里面就行了。</p>\n<p>经过测试，这个对包含复杂js的页面在webview中加载的提升最明显，如果你的页面一直在傻乎乎的loading loading loading.. 最好试一下这个办法。</p>\n<p>不过我们的主体页面初始什么内容都没有，所有DOM都需要mustache根据api的配置，从模板中render，所以Android交了兵权之后还要在页面上空白或者显示自定义的loading图一小会，不过绝对比之前那种体验要明显快的多（大概15秒=&gt;5秒的样子）。</p>\n<p><strong>（4）图片懒加载</strong></p>\n<p>原因还是因为不在Provo，注意此lazyload非彼lazyload，这里是jquery.lazyload，小改动就可以支持zepto.js</p>\n<p>这个插件很常见，最好还是去github主页<a href="\"https://github.com/tuupola/jquery_lazyload/\"">https://github.com/tuupola/jquery_lazyload/</a>看用法，手机上调用的时候最好加上 threshold:300，否则滚动，由占位图加载的等待时间还是有点明显。</p>\n<p>如果滚动加载失效（找不到原因），可以试试在lazyload之后加一条</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">$(window).trigger(&quot;scroll&quot;);</pre>\n<p>就可以了。另外lazyload占位图虽然小，但是最好能提前加载到缓存，这样页面显示的时候高度不会突变，把不同宽高比的占位图放在&lt;body&gt;不显示即可</p>\n<pre class="\"brush:" html;="" gutter:="" false\"="">&lt;img src=&quot;upload/images/other/load_full.jpg&quot; style=&quot;display:none;&quot; /&gt;\r\n&lt;img src=&quot;upload/images/other/load_half.jpg&quot; style=&quot;display:none;&quot; /&gt;</pre>\n<p><strong>（5）使用LocalStorage缓存DOM</strong></p>\n<p>如果你的页面主体和我们这次一样，初始的DOM只有一个loading甚至空白，所有的内容都需要api获取接口数据，然后根据模板（比如mustache.js）render之后在append到DOM里的话，那么不管怎么优化，每次还都是需要等待那么一会儿，api请求接收和js模板引擎的处理在webview上都明显的慢。</p>\n<p>而有些页面虽然需要后台配置，但并不是那么动态，像一个商城的首页这种，即使前端显示更新不那么即时，也不是很大的问题，刷新或者下次进入再显示最新版本也可以接受甚至是更好的用户体验。</p>\n<p>我们这里把第一次mustache render好的html块，存入LocalStorage，然后下次进入页面的时候，先直接从LocalStorage中读取并显示，api读取和模板渲染后的新DOM再更新到LocaStorage中（如果有必要，可以在这个时候，比较下新旧是否相同，不同再更新一次DOM）</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">function jq_lazyload(){\r\n    $(&quot;div#page_all img.lazy&quot;).lazyload({threshold:300, load : function(e){$(this).next(&#039;b&#039;).hide();$(this).removeClass(&#039;lazy&#039;);}});\r\n    $(window).trigger(&quot;scroll&quot;);\r\n}\r\n\r\nfunction loadComplete(){\r\n    //omit ...\r\n\r\n    //如果用localstorage则先lazyload img\r\n    if(window.localStorage){\r\n        if(localStorage.getItem(&#039;dom_all&#039;)){\r\n           jq_lazyload();\r\n        }\r\n    }\r\n\r\n    $.ajax({\r\n        url:server_url,\r\n        dataType:&quot;json&quot;,\r\n        type:&quot;GET&quot;,\r\n        success:function(json){\r\n            var dom_all=&quot;&quot;;\r\n            for(var i=0; i&lt;json.floors.length; i++){\r\n                var style_this = json.floors[i].style;\r\n                dom_all+=Mustache.render($(&#039;#floor_tpl_&#039;+style_this).html(), json.floors[i]);\r\n            }\r\n            if(!window.localStorage || !localStorage.getItem(&#039;dom_all&#039;)){\r\n               document.getElementById(&quot;page_all&quot;).innerHTML = dom_all; \r\n               jq_lazyload();\r\n            }\r\n            localStorage.setItem(&#039;dom_all&#039;,encodeURIComponent(dom_all));\r\n            dom_all=null; //释放内存\r\n        }\r\n   });\r\n}\r\n\r\nfunction loadscript(){\r\n    if(window.localStorage){\r\n        if(localStorage.getItem(&#039;dom_all&#039;)){\r\n            document.getElementById(&quot;page_all&quot;).innerHTML = decodeURIComponent(localStorage.getItem(&#039;dom_all&#039;));\r\n        }\r\n    }\r\n    LazyLoad.js([\r\n        &#039;js/zepto.min.js&#039;,\r\n        &#039;js/jquery.lazyload.min.js&#039;,  \r\n        &#039;js/mustache.js&#039;,\r\n        &#039;js/flowtype.js&#039;\r\n    ], loadComplete);\r\n}\r\nsetTimeout(loadscript,10);\r\n\r\n//处理Webview未lazyload完，进入其它页面，js中止，返回不执行\r\nwindow.ontouchstart = function(e){\r\n    jq_lazyload();\r\n}</pre>\n<p><strong>（6）Webview的设置</strong></p>\n<p>webview本身的设置也很重要，特别是cache和localStorage是否开始，是否app退出再进入就不存在了，各自空间有多大，这些需要和Android开发的同事沟通好，说不定就是一行参数设置，体验就大不同</p>\n<ul>\n<li><strong>Cache开启和设置</strong></li>\n</ul>\n<p>//下面3个是跟浏览器缓存Cache相关的，一个页面的 图片\\js\\css 载入过之后<br>\n//在服务器设置的文件有效期内，每次请求，会去服务器检查文件最后修改时间，如果一致，不会重新下载，而是使用缓存</p>\n<pre class="\"brush:" java;="" gutter:="" false\"="">browser.getSettings().setAppCacheEnabled(true);\r\nbrowser.getSettings().setAppCachePath(&quot;/data/data/[com.packagename]/cache&quot;);\r\nbrowser.getSettings().setAppCacheMaxSize(5*1024*1024); // 5MB</pre>\n<ul>\n<li><strong>LocalStorage相关设置</strong></li>\n</ul>\n<p>//下面是跟浏览的LocalStorage有关的，像首页的DOM，第一次载入，需要从服务器ajax请求接口json配置数据，然后用js从模板中渲染拼接成DOM，显示在页面中<br>\n//由于Android　webview的JS处理很慢，这里把第一次渲染后的DOM存入LocalStorage中，以后打开页面不用请求API和JS渲染，优先加载页面，和Cache配置，速度会快很多<br>\n//但是Android　webview的LocalStorage有个问题，关闭APP或者重启后，就清楚了，所以需要下面browser.getSettings().setDatabase相关的操作，把LocalStoarge存到DB中</p>\n<pre class="\"brush:" java;="" gutter:="" false\"="">browser.getSettings().setDatabaseEnabled(true);\r\nbrowser.getSettings().setDomStorageEnabled(true);\r\nString databasePath = browser.getContext().getDir(&quot;databases&quot;, Context.MODE_PRIVATE).getPath();\r\nbrowser.getSettings().setDatabasePath(databasePath);\r\n\r\nmyWebView.setWebChromeClient(new WebChromeClient(){\r\n　　　 @Override\r\n　　　 public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize, long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater)\r\n　　　 {\r\n　　　　　　　 quotaUpdater.updateQuota(estimatedSize * 2);\r\n　　　 }\r\n}</pre>\n<ul>\n<li><strong>浏览器自带缩放按钮取消显示</strong></li>\n</ul>\n<p>//这个是跟浏览器的页面缩放相关，不用显示浏览器的放大缩小按钮，这个一般在最下面出现，体验不好</p>\n<pre class="\"brush:" java;="" gutter:="" false\"="">browser.getSettings().setBuiltInZoomControls(false);</pre>\n<p><strong>（7）服务器端设置 gzip etag Cache-Control</strong></p>\n<p>gzip就不说了，总之一定要开启html css js json的gzip压缩！！！</p>\n<p>为了弄明白这个，非科班出身的我连着fiddler边调测边翻了小半本&lt;计算机网络&gt;的书，其实也还没完全弄明白。而且测试发现现在的浏览器特别是桌面的360(#Anti-360#)和一些国产手机浏览器，为了制造“极速”的假象，缓存处理很多地方都没有按照规范来，动不动就会过度缓存，导致页面不能及时更新。Android Webview的LOAD_CACHE_ELSE_NETWORK设置更是完全无视etag、expire time这些，强制使用缓存。</p>\n<p>总之，这块还没完全弄明白，等后面彻底明白了再结合fiddler和apache总结下吧。给出我这边apache .htaccess相关配置</p>\n<pre class="\"brush:" text;="" gutter:="" false\"="">&lt;IfModule mod_deflate.c&gt;\r\nAddOutputFilter DEFLATE html xml php js css json\r\n&lt;/IfModule&gt;\r\n\r\n&lt;IfModule mod_headers.c&gt;\r\n    &lt;FilesMatch &quot;\\\\.(ico|jpe?g|bmp|png|gif|swf|css|js|json)$&quot;&gt;\r\n        Header set Cache-Control &quot;max-age=2692000, public&quot;\r\n    &lt;/FilesMatch&gt;\r\n    &lt;FilesMatch &quot;\\\\.(php|html)$&quot;&gt;\r\n        Header set Cache-Control &quot;max-age=60, private, must-revalidate&quot;\r\n    &lt;/FilesMatch&gt;\r\n    Header unset ETag\r\n&lt;/IfModule&gt;</pre>\n<p><strong>（8）以上都不是</strong></p>\n<p>其实Hybrid App的最佳实践，还是应该把所有的html css js和主要的图片资源离线存储在Android的asset文件夹下，然后由Android实现从服务器端到手机的这个www主文件夹的更新机制，这样才不用凡事从server端下载(很多人讨论webapp时只大谈特谈性能，其实一切需要加载的实现方式才是最大的“阻塞”)。这样也可以随心所欲的使用一些Sencha Touch或AngularJS+UI这样的中型和重型框架，可惜上面提到的文件更新机制没有建立，暂时还没有机会实践这种模式。这种想法的文章不多，参考<a href="\"http://developer.appcelerator.com/question/146564/update-apps-local-html-webviewed-files\"">http://developer.appcelerator.com/question/146564/update-apps-local-html-webviewed-files</a>的reply部分</p>\n<p>就到这里吧&#8230;</p>\n<p><strong>本文地址：<a href="\"http://awebird.com/blog/art/122\"" target="\"_blank\"">http://awebird.com/blog/art/122/</a></strong></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 27 Aug 2013 23:03:51 +0000","created_by":1,"updated_at":"Sat, 07 Sep 2013 22:00:47 +0000","updated_by":1,"published_at":"Tue, 27 Aug 2013 23:03:51 +0000","published_by":1},{"id":138,"title":"MyFavUrls","slug":"temp-slug-10","markdown":"\n[http://weibo.com](http://weibo.com/)\n\n[https://twitter.com/](https://twitter.com/)\n\n[https://www.facebook.com/](https://www.facebook.com/)\n\n[http://www.v2ex.com/](http://www.v2ex.com/)\n\n[https://github.com/](https://github.com/)\n\n \n\n \n","html":"<p><a href="\"http://weibo.com/\"">http://weibo.com</a></p>\n<p><a href="\"https://twitter.com/\"">https://twitter.com/</a></p>\n<p><a href="\"https://www.facebook.com/\"">https://www.facebook.com/</a></p>\n<p><a href="\"http://www.v2ex.com/\"">http://www.v2ex.com/</a></p>\n<p><a href="\"https://github.com/\"">https://github.com/</a></p>\n<p>&nbsp;</p>\n","image":null,"featured":0,"page":1,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 31 Aug 2013 21:51:39 +0000","created_by":1,"updated_at":"Sat, 31 Aug 2013 21:51:39 +0000","updated_by":1,"published_at":"","published_by":1},{"id":139,"title":"AweFloor","slug":"awefloor","markdown":"\n[GitHub](https://github.com/awebird/awefloor)\n\n<style type="\"text/css\"">\r\n       .errordiv { padding:10px; margin:10px; border: 1px solid #555555;color: #000000;background-color: #f8f8f8; width:500px; }#awefloor_iframe {visibility:visible;opacity:1;}#ai-layer-div-awefloor_iframe p {height:100%;margin:0;padding:0}</style><script type="\"text/javascript\"">   var ai_iframe_width_awefloor_iframe = 0;   var ai_iframe_height_awefloor_iframe = 0;var aiIsIe8=false;\r\nif (typeof aiReadyCallbacks === 'undefined') {\r\n    var aiReadyCallbacks = [];  \r\n} else if (!(aiReadyCallbacks instanceof Array)) {\r\n    var aiReadyCallbacks = [];\r\n}var onloadFiredawefloor_iframe = false;     function aiShowIframeId(id_iframe) { jQuery(\"#\"+id_iframe).css(\"visibility\", \"visible\");    }    function aiResizeIframeHeight(height) { aiResizeIframeHeight(height,awefloor_iframe); }    function aiResizeIframeHeightId(height,width,id) {aiResizeIframeHeightById(id,height);}</script><iframe allowtransparency="\"true\"" border="\"0\"" frameborder="\"0\"" height="\"600\"" id="\"awefloor_iframe\"" name="\"awefloor_iframe\"" scrolling="\"auto\"" src="\"http://www.awebird.com/awefloor/phone.html\"" width="\"60%\""></iframe><script type="\"text/javascript\"">\r\n          var ifrm_awefloor_iframe = document.getElementById(\"awefloor_iframe\");var hiddenTabsDoneawefloor_iframe = false;\r\nfunction resizeCallbackawefloor_iframe() {}function aiChangeUrl(loc) {}</script> \n","html":"<p><a href="\"https://github.com/awebird/awefloor\"" target="\"_blank\"">GitHub</a></p>\n<style type="\"text/css\"">\r\n       .errordiv { padding:10px; margin:10px; border: 1px solid #555555;color: #000000;background-color: #f8f8f8; width:500px; }#awefloor_iframe {visibility:visible;opacity:1;}#ai-layer-div-awefloor_iframe p {height:100%;margin:0;padding:0}</style><script type="\"text/javascript\"">   var ai_iframe_width_awefloor_iframe = 0;   var ai_iframe_height_awefloor_iframe = 0;var aiIsIe8=false;\r\nif (typeof aiReadyCallbacks === 'undefined') {\r\n    var aiReadyCallbacks = [];  \r\n} else if (!(aiReadyCallbacks instanceof Array)) {\r\n    var aiReadyCallbacks = [];\r\n}var onloadFiredawefloor_iframe = false;     function aiShowIframeId(id_iframe) { jQuery(\"#\"+id_iframe).css(\"visibility\", \"visible\");    }    function aiResizeIframeHeight(height) { aiResizeIframeHeight(height,awefloor_iframe); }    function aiResizeIframeHeightId(height,width,id) {aiResizeIframeHeightById(id,height);}</script><iframe id="awefloor_iframe" name="awefloor_iframe" src="http://www.awebird.com/awefloor/phone.html" width="60%" height="600" scrolling="auto" frameborder="0" border="0" allowtransparency="true"></iframe><script type="\"text/javascript\"">\r\n          var ifrm_awefloor_iframe = document.getElementById(\"awefloor_iframe\");var hiddenTabsDoneawefloor_iframe = false;\r\nfunction resizeCallbackawefloor_iframe() {}function aiChangeUrl(loc) {}</script>\n","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 31 Aug 2013 22:15:08 +0000","created_by":1,"updated_at":"Sat, 31 Aug 2013 22:18:55 +0000","updated_by":1,"published_at":"Sat, 31 Aug 2013 22:15:08 +0000","published_by":1},{"id":161,"title":"使用fiddler调试Native和Hybrid App","slug":"%e4%bd%bf%e7%94%a8fiddler%e8%b0%83%e8%af%95native%e5%92%8chybrid-app","markdown":"\n[![14](http://awebird.com/blog/wp-content/uploads/2013/09/14-300x183.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/14.jpg)\n\n前面一篇文章《[使用fiddler将网站上的css js重定向至本地文件，进行在线调试](http://awebird.com/blog/art/108)》介绍过在使用Fiddler调试PC上浏览器运行的Web网站的方法。最近一段时间工作重心转移到移动端，遇到一些和Native App交互，和Hybrid App(包括微信公众号上运行的HTML5网站)的问题调试和解决，这种场景下，平时最常用的chrome控制台完全失效，Fiddler的优越性更体现出来了..\n\n具体的项目不方便透露和截图，Fiddler的用法前篇文章页介绍过，这边就简而化之，记录下手机连接Fiddler代理的方法，和分别举一个Native和Hybrid的例子说明下\n\n**【一】手机连接Fiddler**\n\n（1）电脑上打开Fiddler\n\nTools-Options-Connections\n\n[![1](http://awebird.com/blog/wp-content/uploads/2013/09/1-300x196.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/1.jpg)\n\n（2）获取本机的局域网IP地址（WIFI）\n\n开始-cmd-ipconfig\n\n[![2](http://awebird.com/blog/wp-content/uploads/2013/09/2-300x128.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/2.jpg)\n\n \n\n（3）手机连接同一wifi，长按wifi名，点“修改网络”-弹出高级选项，输入代理ip和端口\n\n[![3](http://awebird.com/blog/wp-content/uploads/2013/09/3-300x221.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/3.jpg)\n\n[![4](http://awebird.com/blog/wp-content/uploads/2013/09/41-300x298.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/41.jpg)\n\n**【二】检测Native App**\n\n这里以<下厨房>为例\n\napp里的酸辣土豆丝 看到的是这样的\n\n[![5](http://awebird.com/blog/wp-content/uploads/2013/09/5-300x163.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/5.jpg)\n\n \n\nFiddler里看到的数据是这样的\n\n[![6](http://awebird.com/blog/wp-content/uploads/2013/09/6-300x244.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/6.jpg)\n\n当然，并不是所有的app都是这么容易获取到接口和数据的，接口和数据保密做的比较好的app的接口数据还是会加密的（这个貌似webapp先天不足啊）\n\n比如印象笔记EverNote，从接口只能得到这样的数据\n\n[![7](http://awebird.com/blog/wp-content/uploads/2013/09/7-292x300.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/7.jpg)\n\n**【三】检测Hybrid App**\n\n一个高帅富童鞋在微信里分享了个上海的酒店信息，连七天都住不起的程序猿表示很内伤\n\n[![11](http://awebird.com/blog/wp-content/uploads/2013/09/11-300x150.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/11.jpg)\n\n在Fiddler里是这样的\n\n[![12](http://awebird.com/blog/wp-content/uploads/2013/09/12-300x289.jpg)](http://awebird.com/blog/wp-content/uploads/2013/09/12.jpg)\n\n \n\n既然是web的，直接在电脑上也能打开url查看了\n\n[http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NzIxMzU4MA%3D%3D&appmsgid=10000336&itemidx=1&sign=a2b82a70c4a2873f43bf42f2a81b1feb&scene=1&from=message&isappinstalled=0&uin=ODE1Nzg3MjU%3D&key=6a68cf733852b46cfc334349e3ce065b1fa40aea1e36d2c02d4cff481d0b354c3b5f156714ef47e399d09c5d225f0f74&devicetype=android-16&version=25000027&lang=zh_CN](http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NzIxMzU4MA%3D%3D&appmsgid=10000336&itemidx=1&sign=a2b82a70c4a2873f43bf42f2a81b1feb&scene=1&from=message&isappinstalled=0&uin=ODE1Nzg3MjU%3D&key=6a68cf733852b46cfc334349e3ce065b1fa40aea1e36d2c02d4cff481d0b354c3b5f156714ef47e399d09c5d225f0f74&devicetype=android-16&version=25000027&lang=zh_CN)\n\n【结语】\n\n这篇主要是介绍了基本的过程，也留着自己时间长了忘记了（经常发生）回来查阅\n\n，真正遇到问题时往往要换用不同的设备，查看http头（比如最近遇到一个mobile safari上返回键，form表单post data丢失的问题，就只能使用iphone/itouch设备连接Fiddler，边改程序边分析http的request和response）\n\n好吧，就到这里，总之Fiddler确实是个很不错的工具。好的工具可以协助我们做出更好的产品，个人认为web开发测试都应该掌握并经常使用\n\n**本文地址：[http://awebird.com/blog/art/161/](http://awebird.com/blog/art/161)**\n\n \n\n \n\n \n\n \n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/14.jpg\""><img 2013="" class="\"size-medium" wp-image-174="" aligncenter\"="" alt="\"14\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/14-300x183.jpg\"" width="\"300\"" height="\"183\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/14-300x183.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 14.jpg="" 547w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>前面一篇文章《<a href="\"http://awebird.com/blog/art/108\"" target="\"_blank\"">使用fiddler将网站上的css js重定向至本地文件，进行在线调试</a>》介绍过在使用Fiddler调试PC上浏览器运行的Web网站的方法。最近一段时间工作重心转移到移动端，遇到一些和Native App交互，和Hybrid App(包括微信公众号上运行的HTML5网站)的问题调试和解决，这种场景下，平时最常用的chrome控制台完全失效，Fiddler的优越性更体现出来了..<!--more--></p>\n<p>具体的项目不方便透露和截图，Fiddler的用法前篇文章页介绍过，这边就简而化之，记录下手机连接Fiddler代理的方法，和分别举一个Native和Hybrid的例子说明下</p>\n<p><strong>【一】手机连接Fiddler</strong></p>\n<p>（1）电脑上打开Fiddler</p>\n<p>Tools-Options-Connections</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/1.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-162\"="" alt="\"1\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/1-300x196.jpg\"" width="\"300\"" height="\"196\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/1-300x196.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 1.jpg="" 550w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>（2）获取本机的局域网IP地址（WIFI）</p>\n<p>开始-cmd-ipconfig</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/2.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-163\"="" alt="\"2\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/2-300x128.jpg\"" width="\"300\"" height="\"128\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/2-300x128.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 2.jpg="" 457w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>&nbsp;</p>\n<p>（3）手机连接同一wifi，长按wifi名，点“修改网络”-弹出高级选项，输入代理ip和端口</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/3.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-164\"="" alt="\"3\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/3-300x221.jpg\"" width="\"300\"" height="\"221\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/3-300x221.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 3.jpg="" 507w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/41.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-166\"="" alt="\"4\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/41-300x298.jpg\"" width="\"300\"" height="\"298\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/41-300x298.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 41-150x150.jpg="" 150w,="" 41.jpg="" 350w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p><strong>【二】检测Native App</strong></p>\n<p>这里以&lt;下厨房&gt;为例</p>\n<p>app里的酸辣土豆丝 看到的是这样的</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/5.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-167\"="" alt="\"5\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/5-300x163.jpg\"" width="\"300\"" height="\"163\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/5-300x163.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 5-624x339.jpg="" 624w,="" 5.jpg="" 916w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>&nbsp;</p>\n<p>Fiddler里看到的数据是这样的</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/6.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-168\"="" alt="\"6\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/6-300x244.jpg\"" width="\"300\"" height="\"244\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/6-300x244.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 6.jpg="" 479w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>当然，并不是所有的app都是这么容易获取到接口和数据的，接口和数据保密做的比较好的app的接口数据还是会加密的（这个貌似webapp先天不足啊）</p>\n<p>比如印象笔记EverNote，从接口只能得到这样的数据</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/7.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-169\"="" alt="\"7\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/7-292x300.jpg\"" width="\"292\"" height="\"300\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/7-292x300.jpg" 292w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 7.jpg="" 470w\"="" sizes="\"(max-width:" 292px)="" 100vw,="" 292px\"=""></a></p>\n<p><strong>【三】检测Hybrid App</strong></p>\n<p>一个高帅富童鞋在微信里分享了个上海的酒店信息，连七天都住不起的程序猿表示很内伤</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/11.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-170\"="" alt="\"11\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/11-300x150.jpg\"" width="\"300\"" height="\"150\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/11-300x150.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 11.jpg="" 493w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>在Fiddler里是这样的</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/09/12.jpg\""><img 2013="" class="\"alignnone" size-medium="" wp-image-171\"="" alt="\"12\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/09/12-300x289.jpg\"" width="\"300\"" height="\"289\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2013/09/12-300x289.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 09="" 12.jpg="" 406w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>&nbsp;</p>\n<p>既然是web的，直接在电脑上也能打开url查看了</p>\n<p><a href="\"http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NzIxMzU4MA%3D%3D&amp;appmsgid=10000336&amp;itemidx=1&amp;sign=a2b82a70c4a2873f43bf42f2a81b1feb&amp;scene=1&amp;from=message&amp;isappinstalled=0&amp;uin=ODE1Nzg3MjU%3D&amp;key=6a68cf733852b46cfc334349e3ce065b1fa40aea1e36d2c02d4cff481d0b354c3b5f156714ef47e399d09c5d225f0f74&amp;devicetype=android-16&amp;version=25000027&amp;lang=zh_CN\"" target="\"_blank\"">http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5NzIxMzU4MA%3D%3D&amp;appmsgid=10000336&amp;itemidx=1&amp;sign=a2b82a70c4a2873f43bf42f2a81b1feb&amp;scene=1&amp;from=message&amp;isappinstalled=0&amp;uin=ODE1Nzg3MjU%3D&amp;key=6a68cf733852b46cfc334349e3ce065b1fa40aea1e36d2c02d4cff481d0b354c3b5f156714ef47e399d09c5d225f0f74&amp;devicetype=android-16&amp;version=25000027&amp;lang=zh_CN</a></p>\n<p>【结语】</p>\n<p>这篇主要是介绍了基本的过程，也留着自己时间长了忘记了（经常发生）回来查阅</p>\n<p>，真正遇到问题时往往要换用不同的设备，查看http头（比如最近遇到一个mobile safari上返回键，form表单post data丢失的问题，就只能使用iphone/itouch设备连接Fiddler，边改程序边分析http的request和response）</p>\n<p>好吧，就到这里，总之Fiddler确实是个很不错的工具。好的工具可以协助我们做出更好的产品，个人认为web开发测试都应该掌握并经常使用</p>\n<p><strong>本文地址：<a href="\"http://awebird.com/blog/art/161\"" target="\"_blank\"">http://awebird.com/blog/art/161/</a></strong></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 11 Sep 2013 00:21:49 +0000","created_by":1,"updated_at":"Wed, 11 Sep 2013 00:31:05 +0000","updated_by":1,"published_at":"Wed, 11 Sep 2013 00:21:49 +0000","published_by":1},{"id":179,"title":"关于互联网产品的一些牢骚...","slug":"%e5%85%b3%e4%ba%8e%e4%ba%92%e8%81%94%e7%bd%91%e4%ba%a7%e5%93%81%e7%9a%84%e4%b8%80%e4%ba%9b%e7%89%a2%e9%aa%9a","markdown":"\n技术和产品本来就是你攻我守，对立面的角色，作为一个码农，我拒绝使用武力，但是保留发发牢骚的权利…\n\n首先声明下，这里只是简单的表达下自己的看法，有部分非理性发泄的成分。我们是个成长中的团队，还远远没有成功，这也就意味着在做出成功的产品之前，大家都在摸索中，我的这些观点和产品侧会觉得菜鸟技术这也实现不了，那个也不能做是一样的视角..\n\n1 人人都是产品经理\n\n下载几个app，把菜单一个个点过，然后品头论足一下，取其精华，取其糟粕，貌似大家都一下子成了产品经理。就像NBA看过了，国内的论坛里面冒出一大群“懂球帝”…\n\n2 产品不是功能的堆叠\n\n–微信刚出来的时候，只能注册新账户或qq账户登录，只有一个对话框，突出非即时语音通话功能，没有“手机登录”、“发现”、“游戏中心”、“漂流瓶”、“公众号”、“微信支付”…\n\n–twitter刚出来的时候，只有一个输入框，“what are you doing..”(后来改成“what’s happening”)， 界面上没有明显的replay 没有retweet\n\n而现在的产品往往一开始就是功能的堆叠，这里加一个聊天，那边加一个分享，经常就是这个做的跟微博一样，那个做成qq阅读类似的功能，还没有用户的新产品就要做一堆交互分享社区功能，俨然一个及SNS之大成。\n\n难道产品的功能越多，就越证明产品经理的能力强么？至少做成海报list的东西多，会很漂亮。不知道这样要配置一套需要读一整天使用说明的系统给用户带来了多少不必要的学习成本。\n\n \n","html":"<p>技术和产品本来就是你攻我守，对立面的角色，作为一个码农，我拒绝使用武力，但是保留发发牢骚的权利&#8230;</p>\n<p>首先声明下，这里只是简单的表达下自己的看法，有部分非理性发泄的成分。我们是个成长中的团队，还远远没有成功，这也就意味着在做出成功的产品之前，大家都在摸索中，我的这些观点和产品侧会觉得菜鸟技术这也实现不了，那个也不能做是一样的视角..</p>\n<p>1 人人都是产品经理</p>\n<p>下载几个app，把菜单一个个点过，然后品头论足一下，取其精华，取其糟粕，貌似大家都一下子成了产品经理。就像NBA看过了，国内的论坛里面冒出一大群“懂球帝”&#8230;</p>\n<p>2 产品不是功能的堆叠</p>\n<p>&#8211;微信刚出来的时候，只能注册新账户或qq账户登录，只有一个对话框，突出非即时语音通话功能，没有“手机登录”、“发现”、“游戏中心”、“漂流瓶”、“公众号”、“微信支付”&#8230;</p>\n<p>&#8211;twitter刚出来的时候，只有一个输入框，“what are you doing..”(后来改成“what&#8217;s happening”)， 界面上没有明显的replay 没有retweet</p>\n<p>而现在的产品往往一开始就是功能的堆叠，这里加一个聊天，那边加一个分享，经常就是这个做的跟微博一样，那个做成qq阅读类似的功能，还没有用户的新产品就要做一堆交互分享社区功能，俨然一个及SNS之大成。</p>\n<p>难道产品的功能越多，就越证明产品经理的能力强么？至少做成海报list的东西多，会很漂亮。不知道这样要配置一套需要读一整天使用说明的系统给用户带来了多少不必要的学习成本。</p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 09 Oct 2013 13:13:59 +0000","created_by":1,"updated_at":"Wed, 09 Oct 2013 13:13:59 +0000","updated_by":1,"published_at":"","published_by":1},{"id":190,"title":"在Android Webview的assets目录下开发Hybrid App的一些坑&hellip;","slug":"%e5%9c%a8android-webview%e7%9a%84assets%e7%9b%ae%e5%bd%95%e4%b8%8b%e5%bc%80%e5%8f%91hybrid-app%e7%9a%84%e4%b8%80%e4%ba%9b%e5%9d%91","markdown":"\n[![crying_android](http://awebird.com/blog/wp-content/uploads/2013/12/crying_android_thumb.jpg \"crying_android\")](http://awebird.com/blog/wp-content/uploads/2013/12/crying_android.jpg)\n\n好久没写blog了，忙起来真是没法.. 在上一篇文章[《基于Android Webview的Hybrid App开发的前端优化》](http://awebird.com/blog/art/122)的最后一条“*以上都不是*”里提到了“*其实Hybrid App的最佳实践，还是应该把所有的html css js和主要的图片资源离线存储在Android的asset文件夹下，然后由Android实现从服务器端到手机的这个www主文件夹的更新机制，这样才不用凡事从server端下载..*”没想到这么快就应用到新的项目中了。\n\n当然，还只是实现了将webapp放在Android app的assets下，通过json api与server交互这步，理想中的通过app文件操作的更新机制还没有做，但是已经是梦想照进现实的节奏。感谢Android开发的同事包容了我这边不厌其烦反反复复的修改调试，才让这个相对Cutting Edge的方法得以应用到产品中。原本使用Hybrid App的初衷是为了分担Android开发同事的一些工作，但由于实践经验不足，而且Android webview确实还存在一些bug和兼容问题，最后评估下来反而多耗了不少时间精力。因此我们对于Hybrid App方式的使用暂时告一段落，web侧工作重心回归数据和后台开发，但是这轮开发的经验和教训还是很宝贵的，也给了我们更多信心，相信再过一小段时间，HTML5在移动设备的大规模应用就会到来。\n\n好的，梦醒了还是总结下在Android Webview的assets目录下开发Hybrid App的一些坑，和各种跳过或者踩过坑的方案吧。\n\n**<span style="\"font-size:" medium;\"="">【坑 #1】 部分Android 4.0设备（HTC、海尔等）LoadUrl不能识别？参数或#hashtag</span>**\n\n项目开始的时候，web部分是单独开发的，为了以后加入更多模块的扩展考虑，这个项目采用了AngularJs MVVM前端框架和ui-router做页面路由，其实就是单页应用（SPA）。当然，web程序无论采用什么技术，传参数只有两种方式\n\n(1) ?参数形式，如top.html?id=1\n\n(2) #hashtag形式，如index.html#topic/1\n\n如果把程序部署在server端，或者Android的assets目录下，使用Webview访问的方式为\n\nmWebView =(WebView)findViewById(R.id.mb_webview); // String url_server = \"http://www.awebird.com/demo_project/index.html#demo/123\"; String url_assets = \"file:///android_asset/www/demo_project/index.html#demo/123\"; mWebView.loadUrl(url_assets);\n\n我们之前的项目已经大量使用了第一种url_server的方式进行开发，webview loadUrl远程链接也从没有出过问题，所以就顺理成章的开发着，但是等web端做的差不多了，部署到Android工程的assets目录下测试时，遇到一个非常棘手的问题，有一台HTC Android 4.0.3的测试机总是无法打开网页（Page not found）\n\n[![1](http://awebird.com/blog/wp-content/uploads/2013/12/1_thumb.jpg \"1\")](http://awebird.com/blog/wp-content/uploads/2013/12/1.jpg)\n\n由于Android开发侧的同事不懂Web，我这边对Android的了解也是汗毛级别，所以遇到这种问题的纠结与困惑就不赘述，直接给出“坑#1_desc”\n\n**Android的issue 17535 (**Issue [17535](https://code.google.com/p/android/issues/detail?id=17535): WebView – URL mechanism is broken – passing parameters does not work**) **[https://code.google.com/p/android/issues/detail?id=17535](https://code.google.com/p/android/issues/detail?id=17535)\n\n打开这个页面，一阵惊叹，反正我是第一次在google groups或者stackoverflow上看到这么多老外对一个bug如此大面积的愤怒情绪爆发，这个密集程度快赶上国内门户网站中国足球新闻下的评论了Orz..\n\n具体bug不细描述，其实就是Android 3.0以后的webview在访问assets目录下的本地html资源时，带？参数和#hashtag的URL机制不能被识别，上面链接（#148楼）里2012年6月29号有google的开发人员回帖说这个问题已经在Jelly Bean被修复，当然这个只是Android代码的修复，所以现在市面上还是有很多手机的Android版本依然存在这个问题，就像我们不能强迫用户都改用Chrome，不能强迫国行Android用户root手机安装GMS服务包一样，我们也没办法让“找不到网页”的用户换手机或者升级系统，所以问题还是要被解决，下面提供三种方案，我们使用了最后一种\n\n**（1）从Android侧扩展webview类进行处理**\n\n相关的方案和jar包已经在下面的链接列出 Step1~6即可解决。由于要对项目java部分进行改动，所以我们这边app侧没有采纳次方案，但应该是可行的。多提一句，我这边测试过，Phonegap的开源版本Apache Cordova就已经修复了这个问题\n\n[http://bricolsoftconsulting.com/fixing-the-broken-honeycomb-and-ics-webview/](http://bricolsoftconsulting.com/fixing-the-broken-honeycomb-and-ics-webview/)\n\n[https://github.com/bricolsoftconsulting/WebViewIssue17535Fix](https://github.com/bricolsoftconsulting/WebViewIssue17535Fix)\n\n**（2）loadUrl(‘index.html’)后，再loadUrl一句js跳转语句的方法**\n\n这个方法，是得到V2EX的**Archangel_SDY**童鞋提醒，就是先只载入不带参数的页面(可以显示空白页或者loading效果)，在页面载入后(onPageFinished)，在loadUrl一句javascript用于跳转页面，下面的locationTo是在index.html写好的js函数，具体内容可以自己控制，只要接收到参数就ok\n\nAndroid侧 （onKeyDown和java interface是用于处理返回事件问题的）\n\nmWebView = (WebView)findViewById(R.id.mb_webview); String base_url = file:///android_asset/www/demo_project/index.html; mWebView.setWebViewClient(new WebViewClient() { @Override public void onPageFinished(WebView view, String url) { mWebView.loadUrl(\"javascript:locationTo(#demo/\"+\"123\"+\"')\"); super.onPageFinished(view, url); } } mWebView.loadUrl(base_url); @Override public boolean onKeyDown(int keyCode, KeyEvent event){ if(keyCode == KeyEvent.KEYCODE_BACK) { //点击返回键时 if(mWebView.canGoBack()){ mWebView.goBack();// 返回前一个页面 }else{ finish(); } return true; } return super.onKeyDown(keyCode, event); } //Javascript Interface public class demo_java_interface{ /** * 关闭当前页面 */ public void closeCurrectActivity(){ finish(); } }\n\nWeb侧index.html中js (sessionStorge和javascript Interface调用代码是处理手机返回键事件用的)\n\n<script> function locationTo(data_path){ if(!sessionStorage.getItem(\"once\")){ sessionStorage.setItem(\"once\", \"1\"); location.href=data_path; }else{ //call demo_java_interface.goback().. if(window.demo_java_interface){ window.demo_java_interface.closeCurrectActivity(); }else{ console.log('call java to closeCurrentActivity'); } } } </script>\n\n当然，由于我手上没有这个问题的测试机（Android开发在不同城市Orzzzz），其实也不能确认这个方法是否真正有效，因为插入了一个中间页面，所以带来了返回和跳转问题，我们很快放弃了这个方案，继续寻找其它方法\n\n**（3）重写onReceivedError()方法 #最终采纳并测试有效版本#**\n\n参见\n\n[http://stackoverflow.com/questions/6542702/basic-internal-links-dont-work-in-honeycomb-app/7297536#7297536](http://stackoverflow.com/questions/6542702/basic-internal-links-dont-work-in-honeycomb-app/7297536#7297536)\n\n代码（只支持#hashtag）\n\nmWebView = (WebView)findViewById(R.id.mb_webview); String url = file:///android_asset/www/demo_project/index.html#demo/123; @Override public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) { if (failingUrl.contains(\"#\")) { String[] temp; temp = failingUrl.split(\"#\"); mWebView.loadUrl(temp[0]); try { Thread.sleep(400); } catch (InterruptedException e) { e.printStackTrace(); } mWebView.loadUrl(failingUrl); } } mWebView.loadUrl(url);\n\n**<span style="\"font-size:" medium;\"="">**【坑 #2】**所有Android Webview不能捕获#hashtag变化</span>**\n\nHybrid App中Android侧经常需要捕获webview中的url变化来做一些响应（比如改变header title的文字，处理终端的返回键等等）\n\n但是无论是Server端的Url还是assets中的Url，webview都无法捕获到#hashtag的变化，也就是说index.html#step1 –> index.html#step2 –> index.html#step3 … 这些页面跳转是不能被Android监控到的。\n\n这里提供两个解决方案\n\n**（1）在webapp里面使用javascript window.onhashchange里面调用Android的Javascript Interface方法，通知Android hash变化**\n\n[http://stackoverflow.com/questions/15176519/android-webview-is-it-possible-to-detect-url-hash-change](http://stackoverflow.com/questions/15176519/android-webview-is-it-possible-to-detect-url-hash-change)\n\n**（2）自己在页面跳转逻辑里，根据需要调用Android的Javascript Interface方法实现需要的功能**\n\n比如我这边用Angularjs，就在每个url对应的controller里面，调用Android侧的Javascript Interface方法，后来极端一点，由于不同页面功能点差别较大，直接废弃了web侧的ui-router功能，所有的跳转都交给java处理，也就是每个web页面（包括SPA中的一个状态）都交给Android的一个单独Activity，也就是做Activity的条状，Web侧的router白白浪费了T-T\n\n其实上面的（1）和（2）是同一种方法，Android的Java和Webview里的web交互只有两种办法，一个是url捕获，一个是Javascript Interface，这里在#hashtag不能被url捕获到的情况下，就只能使用Javascript Interface了。\n\n这样处理的一个结果就是Hybrid app里的web部分加入的java接口调用，如果脱离了App环境，要单独处理，或者通过检测Javascript Interface对象是否存在，来决定是采用web方法还是app方法跳转\n\n$rootScope.Java_go2step2 = function){ if(window.demo_java_interface_obj){ //如果java interface对象存在，调用Java方法跳转Activity window.demo_java_interface_obj.go2step2); }else{ //否则，使用web跳转 $state.go('step2'); } }\n\n总之，不完美…\n\n \n\n**<span style="\"font-size:" medium;\"="">【坑 #3】Android 2.X Webview不能Scroll滑动</span>**\n\n发现有HTML5的页面在Android 4.x下一切正常，在Android 2.X下不能滑动（Scroll）的问题\n\n这个问题无疑是Android的 bug\n\n目前有两个解决方案\n\n**（1）Html中去掉meta viewport tag (未经验证)**\n\n<meta name="\"viewport\"" content="\"width=device-width," initial-scale="1.0," user-scalable="0," minimum-scale="1.0," maximum-scale="1.0\"">\n\n[http://stackoverflow.com/questions/10552702/cant-scroll-webview-in-android](http://stackoverflow.com/questions/10552702/cant-scroll-webview-in-android)\n\n由于viewport对于移动端的页面适配很重要，前端的同学说不能去掉，试过去掉后样式乱掉了，所以没有采用此方案\n\n**（2）Android中的layout布局，将webview布局在ScrollView中**\n\n<scrollview android:id="\"@+id/scrollView1\"" android:layout_width="\"fill_parent\"" android:layout_height="\"wrap_content\"" android:layout_above="\"@+id/tab\"" android:layout_alignparenttop="\"true\"" android:background="\"#00000000\"" android:scrollbars="\"none\""> <linearlayout android:layout_width="\"fill_parent\"" android:layout_height="\"fill_parent\"" android:background="\"#00000000\"" android:orientation="\"vertical\""> <webview android:id="\"@+id/mb_webview\"" android:layout_width="\"fill_parent\"" android:layout_height="\"wrap_content\""> </webview></linearlayout> </scrollview>\n\n这是Android侧的方案，上面的布局xml只是一个简单demo，web童鞋遇到了可以跟app开发的童鞋沟通解决。<del>我们采用的是此方案</del>\n\n【—–Scroll问题后续——】\n\n后续开发过程中，Android的同事说不能使用上面的ScrollView布局，因为了整体的布局架构有冲突，所以这个问题再次无解，下面是后ScrollView时代的血泪史\n\n**（1）采用iScroll**\n\nangulrjs可以使用[ng-iscroll](https://github.com/ibspoof/ng-iScroll‎)\n\niscroll可以让webapp乍一看很有原生的感觉，但是我个人认为在webview存在不少问题，而且体验也不够顺畅，除非下拉刷新获取更多数据这种场景，应该尽量不用\n\n使用iscroll后测试确实可以在Android 2.3的手机上Scroll，但是有个问题，是因为我们的页面是先载入，在动态$http.post获取数据，更新页面内容的，所以Scroll的范围特别是高度总是会出现可以滑动到最底部，但是又弹回上面的问题..\n\n后来分析是isroll的区域判断了初始页面的位置，所以在$http.post的数据获取后，$timeout延时refresh myscroll\n\n上面的方案貌似解决了，但是在webview下又出现了页面闪烁的现象，而且scroll的体验很不好\n\n（2）最后痛定思痛，还是删除了所有的iscroll部分，重新寻找原因，重要发现元凶\n\noverflow:hidden\n\n是他，是他，就是他！\n\n[原因] Android 2.X不支持这句css\n\n**[解决方案] 去掉，加上 height:auto**\n\n[参考] [Scrollable DIV on mobile phones](http://www.seabreezecomputers.com/tips/scroll-div.htm)\n\n**<span style="\"font-size:" medium;\"="">【还在坑里没爬出来的总结…】</span>**\n\n通过这个Hybrid App项目的实践，我们遇到了不少麻烦，HTML5在移动端的应用已经基本成熟，但是还有一些问题，让我们再耐心一点，做好准备，等Android特别是webview再成熟一点，等手机终端再快一点，等大家发了压岁钱、年终奖都换了新手机… 很多问题就自愈了（同时一大波新问题随之到来）LOL\n\n**本文地址：[http://awebird.com/blog/art/190/](http://awebird.com/blog/art/190)**\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/12/crying_android.jpg\""><img style="\"float:" none;="" margin-left:="" auto;="" display:="" block;="" margin-right:="" border-width:="" 0px;\"="" title="\"crying_android\"" alt="\"crying_android\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/12/crying_android_thumb.jpg\"" width="\"244\"" height="\"111\"" border="\"0\""></a></p>\n<p>好久没写blog了，忙起来真是没法.. 在上一篇文章<a href="\"http://awebird.com/blog/art/122\"" target="\"_blank\"">《基于Android Webview的Hybrid App开发的前端优化》</a>的最后一条“<em>以上都不是</em>”里提到了“<em>其实Hybrid App的最佳实践，还是应该把所有的html css js和主要的图片资源离线存储在Android的asset文件夹下，然后由Android实现从服务器端到手机的这个www主文件夹的更新机制，这样才不用凡事从server端下载..</em>”没想到这么快就应用到新的项目中了。<!--more--></p>\n<p>当然，还只是实现了将webapp放在Android app的assets下，通过json api与server交互这步，理想中的通过app文件操作的更新机制还没有做，但是已经是梦想照进现实的节奏。感谢Android开发的同事包容了我这边不厌其烦反反复复的修改调试，才让这个相对Cutting Edge的方法得以应用到产品中。原本使用Hybrid App的初衷是为了分担Android开发同事的一些工作，但由于实践经验不足，而且Android webview确实还存在一些bug和兼容问题，最后评估下来反而多耗了不少时间精力。因此我们对于Hybrid App方式的使用暂时告一段落，web侧工作重心回归数据和后台开发，但是这轮开发的经验和教训还是很宝贵的，也给了我们更多信心，相信再过一小段时间，HTML5在移动设备的大规模应用就会到来。</p>\n<p>好的，梦醒了还是总结下在Android Webview的assets目录下开发Hybrid App的一些坑，和各种跳过或者踩过坑的方案吧。</p>\n<p><strong><span style="\"font-size:" medium;\"="">【坑 #1】 部分Android 4.0设备（HTC、海尔等）LoadUrl不能识别？参数或#hashtag</span></strong></p>\n<p>项目开始的时候，web部分是单独开发的，为了以后加入更多模块的扩展考虑，这个项目采用了AngularJs MVVM前端框架和ui-router做页面路由，其实就是单页应用（SPA）。当然，web程序无论采用什么技术，传参数只有两种方式</p>\n<p>(1) ?参数形式，如top.html?id=1</p>\n<p>(2) #hashtag形式，如index.html#topic/1</p>\n<p>如果把程序部署在server端，或者Android的assets目录下，使用Webview访问的方式为</p>\n<pre class="\"brush:" java;="" gutter:="" false\"="">mWebView =(WebView)findViewById(R.id.mb_webview);\r\n// String url_server = &quot;http://www.awebird.com/demo_project/index.html#demo/123&quot;;\r\nString url_assets = &quot;file:///android_asset/www/demo_project/index.html#demo/123&quot;;\r\nmWebView.loadUrl(url_assets);</pre>\n<p>我们之前的项目已经大量使用了第一种url_server的方式进行开发，webview loadUrl远程链接也从没有出过问题，所以就顺理成章的开发着，但是等web端做的差不多了，部署到Android工程的assets目录下测试时，遇到一个非常棘手的问题，有一台HTC Android 4.0.3的测试机总是无法打开网页（Page not found）</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2013/12/1.jpg\""><img style="\"display:" inline;="" border-width:="" 0px;\"="" title="\"1\"" alt="\"1\"" src="\"http://awebird.com/blog/wp-content/uploads/2013/12/1_thumb.jpg\"" width="\"244\"" height="\"124\"" border="\"0\""></a></p>\n<p>由于Android开发侧的同事不懂Web，我这边对Android的了解也是汗毛级别，所以遇到这种问题的纠结与困惑就不赘述，直接给出“坑#1_desc”</p>\n<p><strong>Android的issue 17535 (</strong>Issue <a href="\"https://code.google.com/p/android/issues/detail?id=17535\"">17535</a>: WebView &#8211; URL mechanism is broken &#8211; passing parameters does not work<strong>) </strong><a href="\"https://code.google.com/p/android/issues/detail?id=17535\"">https://code.google.com/p/android/issues/detail?id=17535</a></p>\n<p>打开这个页面，一阵惊叹，反正我是第一次在google groups或者stackoverflow上看到这么多老外对一个bug如此大面积的愤怒情绪爆发，这个密集程度快赶上国内门户网站中国足球新闻下的评论了Orz..</p>\n<p>具体bug不细描述，其实就是Android 3.0以后的webview在访问assets目录下的本地html资源时，带？参数和#hashtag的URL机制不能被识别，上面链接（#148楼）里2012年6月29号有google的开发人员回帖说这个问题已经在Jelly Bean被修复，当然这个只是Android代码的修复，所以现在市面上还是有很多手机的Android版本依然存在这个问题，就像我们不能强迫用户都改用Chrome，不能强迫国行Android用户root手机安装GMS服务包一样，我们也没办法让“找不到网页”的用户换手机或者升级系统，所以问题还是要被解决，下面提供三种方案，我们使用了最后一种</p>\n<p><strong>（1）从Android侧扩展webview类进行处理</strong></p>\n<p>相关的方案和jar包已经在下面的链接列出 Step1~6即可解决。由于要对项目java部分进行改动，所以我们这边app侧没有采纳次方案，但应该是可行的。多提一句，我这边测试过，Phonegap的开源版本Apache Cordova就已经修复了这个问题</p>\n<p><a href="\"http://bricolsoftconsulting.com/fixing-the-broken-honeycomb-and-ics-webview/\"">http://bricolsoftconsulting.com/fixing-the-broken-honeycomb-and-ics-webview/</a></p>\n<p><a href="\"https://github.com/bricolsoftconsulting/WebViewIssue17535Fix\"">https://github.com/bricolsoftconsulting/WebViewIssue17535Fix</a></p>\n<p><strong>（2）loadUrl(‘index.html’)后，再loadUrl一句js跳转语句的方法</strong></p>\n<p>这个方法，是得到V2EX的<strong>Archangel_SDY</strong>童鞋提醒，就是先只载入不带参数的页面(可以显示空白页或者loading效果)，在页面载入后(onPageFinished)，在loadUrl一句javascript用于跳转页面，下面的locationTo是在index.html写好的js函数，具体内容可以自己控制，只要接收到参数就ok</p>\n<p>Android侧 （onKeyDown和java interface是用于处理返回事件问题的）</p>\n<pre class="\"brush:" java;="" gutter:="" false\"="">mWebView = (WebView)findViewById(R.id.mb_webview);\r\nString base_url = file:///android_asset/www/demo_project/index.html;\r\nmWebView.setWebViewClient(new WebViewClient() {\r\n    @Override\r\n    public void onPageFinished(WebView view, String url) {\r\n        mWebView.loadUrl(&quot;javascript:locationTo(#demo/&quot;+&quot;123&quot;+&quot;&#039;)&quot;);\r\n        super.onPageFinished(view, url);\r\n    }\r\n}\r\nmWebView.loadUrl(base_url);\r\n\r\n@Override\r\npublic boolean onKeyDown(int keyCode, KeyEvent event){\r\n        if(keyCode == KeyEvent.KEYCODE_BACK) {\r\n            //点击返回键时\r\n            if(mWebView.canGoBack()){\r\n                   mWebView.goBack();// 返回前一个页面\r\n            }else{\r\n                    finish();\r\n            }\r\n            return true;\r\n        }\r\n    return super.onKeyDown(keyCode, event);\r\n}\r\n\r\n//Javascript Interface\r\npublic class demo_java_interface{\r\n        /**\r\n         * 关闭当前页面\r\n         */\r\n        public void closeCurrectActivity(){\r\n            finish();\r\n        }\r\n}</pre>\n<p>Web侧index.html中js (sessionStorge和javascript Interface调用代码是处理手机返回键事件用的)</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">&lt;script&gt;\r\nfunction locationTo(data_path){\r\n  if(!sessionStorage.getItem(&quot;once&quot;)){\r\n    sessionStorage.setItem(&quot;once&quot;, &quot;1&quot;);\r\n      location.href=data_path;\r\n    }else{\r\n      //call demo_java_interface.goback()..\r\n      if(window.demo_java_interface){\r\n        window.demo_java_interface.closeCurrectActivity();\r\n    }else{\r\n        console.log(&#039;call java to closeCurrentActivity&#039;);\r\n    }\r\n  }\r\n}\r\n&lt;/script&gt;</pre>\n<p>当然，由于我手上没有这个问题的测试机（Android开发在不同城市Orzzzz），其实也不能确认这个方法是否真正有效，因为插入了一个中间页面，所以带来了返回和跳转问题，我们很快放弃了这个方案，继续寻找其它方法</p>\n<p><strong>（3）重写onReceivedError()方法 #最终采纳并测试有效版本#</strong></p>\n<p>参见</p>\n<p><a href="\"http://stackoverflow.com/questions/6542702/basic-internal-links-dont-work-in-honeycomb-app/7297536#7297536\"">http://stackoverflow.com/questions/6542702/basic-internal-links-dont-work-in-honeycomb-app/7297536#7297536</a></p>\n<p>代码（只支持#hashtag）</p>\n<pre class="\"brush:" java;="" gutter:="" false\"="">mWebView = (WebView)findViewById(R.id.mb_webview);\r\n\r\nString url = file:///android_asset/www/demo_project/index.html#demo/123;\r\n\r\n@Override\r\npublic void onReceivedError(WebView view, int errorCode, String description, String failingUrl)\r\n{\r\n    if (failingUrl.contains(&quot;#&quot;)) {\r\n      String[] temp;\r\n      temp = failingUrl.split(&quot;#&quot;);\r\n      mWebView.loadUrl(temp[0]);\r\n       try {\r\n        Thread.sleep(400);\r\n      } catch (InterruptedException e) {\r\n         e.printStackTrace();\r\n      }\r\n       mWebView.loadUrl(failingUrl);\r\n     }\r\n}\r\n\r\nmWebView.loadUrl(url);</pre>\n<p><strong><span style="\"font-size:" medium;\"=""><strong>【坑 #2】</strong>所有Android Webview不能捕获#hashtag变化</span></strong></p>\n<p>Hybrid App中Android侧经常需要捕获webview中的url变化来做一些响应（比如改变header title的文字，处理终端的返回键等等）</p>\n<p>但是无论是Server端的Url还是assets中的Url，webview都无法捕获到#hashtag的变化，也就是说index.html#step1 –&gt; index.html#step2 –&gt; index.html#step3 … 这些页面跳转是不能被Android监控到的。</p>\n<p>这里提供两个解决方案</p>\n<p><strong>（1）在webapp里面使用javascript window.onhashchange里面调用Android的Javascript Interface方法，通知Android hash变化</strong></p>\n<p><a href="\"http://stackoverflow.com/questions/15176519/android-webview-is-it-possible-to-detect-url-hash-change\"">http://stackoverflow.com/questions/15176519/android-webview-is-it-possible-to-detect-url-hash-change</a></p>\n<p><strong>（2）自己在页面跳转逻辑里，根据需要调用Android的Javascript Interface方法实现需要的功能</strong></p>\n<p>比如我这边用Angularjs，就在每个url对应的controller里面，调用Android侧的Javascript Interface方法，后来极端一点，由于不同页面功能点差别较大，直接废弃了web侧的ui-router功能，所有的跳转都交给java处理，也就是每个web页面（包括SPA中的一个状态）都交给Android的一个单独Activity，也就是做Activity的条状，Web侧的router白白浪费了T-T</p>\n<p>其实上面的（1）和（2）是同一种方法，Android的Java和Webview里的web交互只有两种办法，一个是url捕获，一个是Javascript Interface，这里在#hashtag不能被url捕获到的情况下，就只能使用Javascript Interface了。</p>\n<p>这样处理的一个结果就是Hybrid app里的web部分加入的java接口调用，如果脱离了App环境，要单独处理，或者通过检测Javascript Interface对象是否存在，来决定是采用web方法还是app方法跳转</p>\n<pre class="\"brush:" javascript;="" gutter:="" false\"="">$rootScope.Java_go2step2 = function){\r\n     if(window.demo_java_interface_obj){\r\n        //如果java interface对象存在，调用Java方法跳转Activity\r\n        window.demo_java_interface_obj.go2step2);\r\n    }else{\r\n        //否则，使用web跳转\r\n        $state.go(&#039;step2&#039;);\r\n     }\r\n }</pre>\n<p>总之，不完美…</p>\n<p>&nbsp;</p>\n<p><strong><span style="\"font-size:" medium;\"="">【坑 #3】Android 2.X Webview不能Scroll滑动</span></strong></p>\n<p>发现有HTML5的页面在Android 4.x下一切正常，在Android 2.X下不能滑动（Scroll）的问题</p>\n<p>这个问题无疑是Android的 bug</p>\n<p>目前有两个解决方案</p>\n<p><strong>（1）Html中去掉meta viewport tag (未经验证)</strong></p>\n<pre class="\"brush:" html;="" gutter:="" false\"="">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0&quot; /&gt;</pre>\n<p><a href="\"http://stackoverflow.com/questions/10552702/cant-scroll-webview-in-android\"">http://stackoverflow.com/questions/10552702/cant-scroll-webview-in-android</a></p>\n<p>由于viewport对于移动端的页面适配很重要，前端的同学说不能去掉，试过去掉后样式乱掉了，所以没有采用此方案</p>\n<p><strong>（2）Android中的layout布局，将webview布局在ScrollView中</strong></p>\n<pre class="\"brush:" xml;="" gutter:="" false\"="">&lt;ScrollView\r\n            android:id=&quot;@+id/scrollView1&quot;\r\n            android:layout_width=&quot;fill_parent&quot;\r\n            android:layout_height=&quot;wrap_content&quot;\r\n            android:layout_above=&quot;@+id/tab&quot;\r\n            android:layout_alignParentTop=&quot;true&quot;\r\n            android:background=&quot;#00000000&quot;\r\n            android:scrollbars=&quot;none&quot; &gt;\r\n            &lt;LinearLayout\r\n                android:layout_width=&quot;fill_parent&quot;\r\n                android:layout_height=&quot;fill_parent&quot;\r\n                android:background=&quot;#00000000&quot;\r\n                android:orientation=&quot;vertical&quot; &gt;\r\n                &lt;WebView\r\n                    android:id=&quot;@+id/mb_webview&quot;\r\n                    android:layout_width=&quot;fill_parent&quot;\r\n                    android:layout_height=&quot;wrap_content&quot; /&gt;\r\n            &lt;/LinearLayout&gt;\r\n&lt;/ScrollView&gt;</pre>\n<p>这是Android侧的方案，上面的布局xml只是一个简单demo，web童鞋遇到了可以跟app开发的童鞋沟通解决。<del>我们采用的是此方案</del></p>\n<p>【&#8212;&#8211;Scroll问题后续&#8212;&#8212;】</p>\n<p>后续开发过程中，Android的同事说不能使用上面的ScrollView布局，因为了整体的布局架构有冲突，所以这个问题再次无解，下面是后ScrollView时代的血泪史</p>\n<p><strong>（1）采用iScroll</strong></p>\n<p>angulrjs可以使用<a href="\"https://github.com/ibspoof/ng-iScroll‎\"" target="\"_blank\"">ng-iscroll</a></p>\n<p>iscroll可以让webapp乍一看很有原生的感觉，但是我个人认为在webview存在不少问题，而且体验也不够顺畅，除非下拉刷新获取更多数据这种场景，应该尽量不用</p>\n<p>使用iscroll后测试确实可以在Android 2.3的手机上Scroll，但是有个问题，是因为我们的页面是先载入，在动态$http.post获取数据，更新页面内容的，所以Scroll的范围特别是高度总是会出现可以滑动到最底部，但是又弹回上面的问题..</p>\n<p>后来分析是isroll的区域判断了初始页面的位置，所以在$http.post的数据获取后，$timeout延时refresh myscroll</p>\n<p>上面的方案貌似解决了，但是在webview下又出现了页面闪烁的现象，而且scroll的体验很不好</p>\n<p>（2）最后痛定思痛，还是删除了所有的iscroll部分，重新寻找原因，重要发现元凶</p>\n<pre class="\"brush:" css;="" gutter:="" false\"="">overflow:hidden</pre>\n<p>是他，是他，就是他！</p>\n<p>[原因] Android 2.X不支持这句css</p>\n<p><strong>[解决方案] 去掉，加上 height:auto</strong></p>\n<p>[参考] <a href="\"http://www.seabreezecomputers.com/tips/scroll-div.htm\"" target="\"_blank\"">Scrollable DIV on mobile phones</a></p>\n<p><strong><span style="\"font-size:" medium;\"="">【还在坑里没爬出来的总结…】</span></strong></p>\n<p>通过这个Hybrid App项目的实践，我们遇到了不少麻烦，HTML5在移动端的应用已经基本成熟，但是还有一些问题，让我们再耐心一点，做好准备，等Android特别是webview再成熟一点，等手机终端再快一点，等大家发了压岁钱、年终奖都换了新手机… 很多问题就自愈了（同时一大波新问题随之到来）LOL</p>\n<p><strong>本文地址：<a href="\"http://awebird.com/blog/art/190\"" target="\"_blank\"">http://awebird.com/blog/art/190/</a></strong></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 08 Dec 2013 16:01:22 +0000","created_by":1,"updated_at":"Fri, 13 Dec 2013 22:38:13 +0000","updated_by":1,"published_at":"Sun, 08 Dec 2013 16:01:22 +0000","published_by":1},{"id":203,"title":"未婚先胖...","slug":"%e5%b7%b2%e6%98%8f","markdown":"\n[![aa](http://awebird.com/blog/wp-content/uploads/2014/05/aa-300x196.jpg)](http://awebird.com/blog/wp-content/uploads/2014/05/aa.jpg)\n\n今天把域名续费了，才想起这个博客太久没有更新..\n\n一年的域名加主机费用，才零散的写了那么几篇，实在大浪费。技术总结还是很有必要，现在有同事遇到问题，一个文章链接发过去就不用多费口舌，而且时间越久越有价值。\n\n没有更新的主要原因有三\n\n（1）懒，obviously\n\n（2）工作很忙，而且最近没有做移动前端，值得分享且有冲动分享的东西不多\n\n（3）LP大人回国后，生活的琐事慢慢多起来，个人时间收紧\n\n域名续了一年，未来一年的目标要调整好工作和生活，多总结多记录，就这样\n\n//————————————————————————————————————-\n\n然后就是已婚了，5月22，Mark下…\n\n附婚纱照一张（应题），LP的还未获批准暂时不能放出来\n\n[![aa](http://awebird.com/blog/wp-content/uploads/2014/05/aa1-241x300.jpg)](http://awebird.com/blog/wp-content/uploads/2014/05/aa1.jpg)\n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2014/05/aa.jpg\""><img 2014="" class="\"size-medium" wp-image-205="" aligncenter\"="" src="\"http://awebird.com/blog/wp-content/uploads/2014/05/aa-300x196.jpg\"" alt="\"aa\"" width="\"300\"" height="\"196\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2014/05/aa-300x196.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 05="" aa-624x408.jpg="" 624w,="" aa.jpg="" 650w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>今天把域名续费了，才想起这个博客太久没有更新..<!--more--></p>\n<p>一年的域名加主机费用，才零散的写了那么几篇，实在大浪费。技术总结还是很有必要，现在有同事遇到问题，一个文章链接发过去就不用多费口舌，而且时间越久越有价值。</p>\n<p>没有更新的主要原因有三</p>\n<p>（1）懒，obviously</p>\n<p>（2）工作很忙，而且最近没有做移动前端，值得分享且有冲动分享的东西不多</p>\n<p>（3）LP大人回国后，生活的琐事慢慢多起来，个人时间收紧</p>\n<p>域名续了一年，未来一年的目标要调整好工作和生活，多总结多记录，就这样</p>\n<p>//&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</p>\n<p>然后就是已婚了，5月22，Mark下&#8230;</p>\n<p>附婚纱照一张（应题），LP的还未获批准暂时不能放出来</p>\n<p><a href="\"http://awebird.com/blog/wp-content/uploads/2014/05/aa1.jpg\""><img 2014="" class="\"size-medium" wp-image-208="" aligncenter\"="" src="\"http://awebird.com/blog/wp-content/uploads/2014/05/aa1-241x300.jpg\"" alt="\"aa\"" width="\"241\"" height="\"300\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2014/05/aa1-241x300.jpg" 241w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 05="" aa1.jpg="" 517w\"="" sizes="\"(max-width:" 241px)="" 100vw,="" 241px\"=""></a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 29 May 2014 00:30:45 +0000","created_by":1,"updated_at":"Thu, 29 May 2014 09:49:46 +0000","updated_by":1,"published_at":"Thu, 29 May 2014 00:30:45 +0000","published_by":1},{"id":212,"title":"Life is all about choices..2014","slug":"life-choices-2014","markdown":"\n[![1111](http://awebird.com/blog/wp-content/uploads/2014/10/1111-300x216.jpg)](http://awebird.com/blog/wp-content/uploads/2014/10/1111.jpg)\n\n \n","html":"<p style="\"text-align:" center;\"=""><a href="\"http://awebird.com/blog/wp-content/uploads/2014/10/1111.jpg\""><img 10="" 2014="" class="\"alignnone" size-medium="" wp-image-213\"="" src="\"http://awebird.com/blog/wp-content/uploads/2014/10/1111-300x216.jpg\"" alt="\"1111\"" width="\"300\"" height="\"216\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2014/10/1111-300x216.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 1111.jpg="" 500w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 15 Oct 2014 22:50:56 +0000","created_by":1,"updated_at":"Wed, 15 Oct 2014 22:50:56 +0000","updated_by":1,"published_at":"Wed, 15 Oct 2014 22:50:56 +0000","published_by":1},{"id":215,"title":"test SEO","slug":"test-seo","markdown":"\ntest\n\n \n","html":"<p>test</p>\n","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 21 Nov 2014 09:37:13 +0000","created_by":1,"updated_at":"Fri, 21 Nov 2014 09:37:13 +0000","updated_by":1,"published_at":"","published_by":1},{"id":219,"title":"2014年终小结","slug":"2014%e5%b9%b4%e7%bb%88%e5%b0%8f%e7%bb%93","markdown":"\n[![41d5uf](http://awebird.com/blog/wp-content/uploads/2014/12/41d5uf-300x228.jpg)](http://awebird.com/blog/wp-content/uploads/2014/12/41d5uf.jpg)\n\n整理下桌子，收拾下心情，准备写点文字，送别2014。\n\n虽说对于大部分中国人来说，元旦不过算是个“洋节”，只是休一天假而已，真正的一年要在一个半月后才会结束。但是今天下班时，我却明显的有了告别一年，急匆匆要放下一担好好休整下的感觉，同事们也都早早下班，各有各的去处…\n\n回顾过去这一年，惊讶的发现从硬性指标来说，我的生活居然发生了几件大事\n\n**No.1 婚了**\n\n合法的领了证，合情合理的回老家办了婚礼。完成人生大事一桩，从此和认识十年的老婆幸福的生活在一起…\n\n说心里话感悟并不是很多，领证婚礼更多的是顺从法律和人情世事走的仪式，当然最大的好处让双方父母和爷爷奶奶们开心一下。我和老婆都不算是很浪漫和讲究的人，既然决定在一起了，一切就是水到渠成的事.. 至于婚礼，基本都是父母和姐姐操办，我们俩提前一天回家“出席”了下，也没有休假就匆匆赶回来上班（据说这一上就要幸福快乐任劳任怨的到70岁才能退休Orz..）\n\n有一点点小不顺心，老婆新工作由于学校实验仪器的原因，基本这半年多都在杭州出差（异地科研-_lll），没想到经历了美国的两年后刚凑到一起，又要这样每到周末才能在一起。心里多少有些不爽，两个人也没少为此生气，但是确实是客观因素，也算是对我们的新的考验吧。好在这种生活很快就结束了，希望2015能是一种新的状态。\n\n**No.2 奴了。**\n\n买了房，未来很多年都是负翁。这事算是我个人的一大突破，对于我这种怕麻烦的人来说，不依靠父母（当然首付还是很大部分来自他们），一直很难想象自己可以处理这么多繁杂的事情，最后算是有些运气的成分，整个过程还算省心，估计比一些人去租个房子还省事，符合我们两人的一切从简从易的生活态度。从此在南京有个小窝，虽然自此每月拮据不少，也算是强制培养了节俭和理财的习惯。从这个角度讲，我认为应该更年轻一点结婚买房甚至生子，个人会成长和有担当的更快一些。\n\n**No.3 挪了。**\n\nNew Career，从工作了两年多的准创业公司来到途牛。关于离开，我自己也说不清楚到底“是心委屈了，还是钱没给到位”（马总语），直接的导火索应该是公司的搬迁和新项目的合伙人给我Yesterday-Once-More的强烈心里暗示。回顾这两年，从一开始戏剧化的0基础面试入职（特别感谢高总的知遇之恩和一贯近于放任的信任），当后来慢慢做到web端负责人，自己的成长有本身的努力，也有很多机缘巧合，还遇到了很多很牛的同事（感谢互联网的开放和自由，我觉得我选对了适合自己的行业）。很遗憾到我离开的时候，很多梦想还没有实现，希望坚守的兄弟们可以做好。关于新工作，感谢另一位高总把我带到途牛并一直给予我本不应得的信任。入职两个多月也还在试用期，说实话由于一些主客观因素还没有完全找到属于自己的节奏，但这些都可以克服，最兴奋也特别憧憬的是看到这份新工作给我在技术和事业上都拓展了很大的可提升空间，有了值得拼一把的方向..\n\n总结过去这年，有了这三件大事，加上许多附加的小事，很深的一个感觉就是时间被分割的很零碎，没有一个平常心和稳定的状态好好的做事情。现在新的环境和方向有了，未来一年的重心就是**工作**。\n\n最后，感谢2014！\n\n \n\n \n\n \n","html":"<p><a href="\"http://awebird.com/blog/wp-content/uploads/2014/12/41d5uf.jpg\""><img 12="" 2014="" class="\"aligncenter" size-medium="" wp-image-223\"="" src="\"http://awebird.com/blog/wp-content/uploads/2014/12/41d5uf-300x228.jpg\"" alt="\"41d5uf\"" width="\"300\"" height="\"228\"" srcset="\"http://awebird.com/blog/wp-content/uploads/2014/12/41d5uf-300x228.jpg" 300w,="" http:="" awebird.com="" blog="" wp-content="" uploads="" 41d5uf.jpg="" 600w\"="" sizes="\"(max-width:" 300px)="" 100vw,="" 300px\"=""></a></p>\n<p>整理下桌子，收拾下心情，准备写点文字，送别2014。</p>\n<p>虽说对于大部分中国人来说，元旦不过算是个“洋节”，只是休一天假而已，真正的一年要在一个半月后才会结束。但是今天下班时，我却明显的有了告别一年，急匆匆要放下一担好好休整下的感觉，同事们也都早早下班，各有各的去处&#8230;</p>\n<p>回顾过去这一年，惊讶的发现从硬性指标来说，我的生活居然发生了几件大事<!--more--></p>\n<p><strong>No.1 婚了</strong></p>\n<p>合法的领了证，合情合理的回老家办了婚礼。完成人生大事一桩，从此和认识十年的老婆幸福的生活在一起&#8230;</p>\n<p>说心里话感悟并不是很多，领证婚礼更多的是顺从法律和人情世事走的仪式，当然最大的好处让双方父母和爷爷奶奶们开心一下。我和老婆都不算是很浪漫和讲究的人，既然决定在一起了，一切就是水到渠成的事.. 至于婚礼，基本都是父母和姐姐操办，我们俩提前一天回家“出席”了下，也没有休假就匆匆赶回来上班（据说这一上就要幸福快乐任劳任怨的到70岁才能退休Orz..）</p>\n<p>有一点点小不顺心，老婆新工作由于学校实验仪器的原因，基本这半年多都在杭州出差（异地科研-_lll），没想到经历了美国的两年后刚凑到一起，又要这样每到周末才能在一起。心里多少有些不爽，两个人也没少为此生气，但是确实是客观因素，也算是对我们的新的考验吧。好在这种生活很快就结束了，希望2015能是一种新的状态。</p>\n<p><strong>No.2 奴了。</strong></p>\n<p>买了房，未来很多年都是负翁。这事算是我个人的一大突破，对于我这种怕麻烦的人来说，不依靠父母（当然首付还是很大部分来自他们），一直很难想象自己可以处理这么多繁杂的事情，最后算是有些运气的成分，整个过程还算省心，估计比一些人去租个房子还省事，符合我们两人的一切从简从易的生活态度。从此在南京有个小窝，虽然自此每月拮据不少，也算是强制培养了节俭和理财的习惯。从这个角度讲，我认为应该更年轻一点结婚买房甚至生子，个人会成长和有担当的更快一些。</p>\n<p><strong>No.3 挪了。</strong></p>\n<p>New Career，从工作了两年多的准创业公司来到途牛。关于离开，我自己也说不清楚到底“是心委屈了，还是钱没给到位”（马总语），直接的导火索应该是公司的搬迁和新项目的合伙人给我Yesterday-Once-More的强烈心里暗示。回顾这两年，从一开始戏剧化的0基础面试入职（特别感谢高总的知遇之恩和一贯近于放任的信任），当后来慢慢做到web端负责人，自己的成长有本身的努力，也有很多机缘巧合，还遇到了很多很牛的同事（感谢互联网的开放和自由，我觉得我选对了适合自己的行业）。很遗憾到我离开的时候，很多梦想还没有实现，希望坚守的兄弟们可以做好。关于新工作，感谢另一位高总把我带到途牛并一直给予我本不应得的信任。入职两个多月也还在试用期，说实话由于一些主客观因素还没有完全找到属于自己的节奏，但这些都可以克服，最兴奋也特别憧憬的是看到这份新工作给我在技术和事业上都拓展了很大的可提升空间，有了值得拼一把的方向..</p>\n<p>总结过去这年，有了这三件大事，加上许多附加的小事，很深的一个感觉就是时间被分割的很零碎，没有一个平常心和稳定的状态好好的做事情。现在新的环境和方向有了，未来一年的重心就是<strong>工作</strong>。</p>\n<p>最后，感谢2014！</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 31 Dec 2014 22:19:47 +0000","created_by":1,"updated_at":"Wed, 31 Dec 2014 22:46:02 +0000","updated_by":1,"published_at":"Wed, 31 Dec 2014 22:19:47 +0000","published_by":1}],"tags":[{"id":53,"name":"163邮箱","slug":"163%e9%82%ae%e7%ae%b1","description":""},{"id":56,"name":"400","slug":"400","description":""},{"id":9,"name":"ActionScript","slug":"actionscript","description":""},{"id":47,"name":"Android","slug":"android","description":""},{"id":70,"name":"angularjs","slug":"angularjs","description":""},{"id":41,"name":"apache","slug":"apache","description":""},{"id":67,"name":"assets","slug":"assets","description":""},{"id":34,"name":"CORS","slug":"cors","description":""},{"id":58,"name":"css","slug":"css","description":""},{"id":52,"name":"curl","slug":"curl","description":""},{"id":57,"name":"fiddler","slug":"fiddler","description":""},{"id":7,"name":"Flash","slug":"flash","description":""},{"id":26,"name":"Front-end","slug":"front-end","description":""},{"id":13,"name":"Geolocation","slug":"geolocation","description":""},{"id":46,"name":"GMS服务包","slug":"gms%e6%9c%8d%e5%8a%a1%e5%8c%85","description":""},{"id":44,"name":"google","slug":"google","description":""},{"id":69,"name":"hashtag","slug":"hashtag","description":""},{"id":37,"name":"hosts","slug":"hosts","description":""},{"id":12,"name":"HTML5","slug":"html5","description":""},{"id":42,"name":"httpd.conf","slug":"httpd-conf","description":""},{"id":61,"name":"hybrid app","slug":"hybrid-app","description":""},{"id":49,"name":"IP定位","slug":"ip%e5%ae%9a%e4%bd%8d","description":""},{"id":72,"name":"iscroll","slug":"iscroll","description":""},{"id":19,"name":"javascript","slug":"javascript","description":""},{"id":24,"name":"jquery","slug":"jquery","description":""},{"id":17,"name":"JSONP","slug":"jsonp","description":""},{"id":64,"name":"native app","slug":"native-app","description":""},{"id":27,"name":"optimization","slug":"optimization","description":""},{"id":73,"name":"overflow:hidden","slug":"overflowhidden","description":""},{"id":20,"name":"PHP","slug":"php","description":""},{"id":38,"name":"qq互联","slug":"qq%e4%ba%92%e8%81%94","description":""},{"id":43,"name":"qq登录","slug":"qq%e7%99%bb%e5%bd%95","description":""},{"id":32,"name":"showlog","slug":"showlog","description":""},{"id":55,"name":"stackoverflow","slug":"stackoverflow","description":""},{"id":30,"name":"subversion","slug":"subversion","description":""},{"id":28,"name":"svn","slug":"svn","description":""},{"id":29,"name":"svnsync","slug":"svnsync","description":""},{"id":71,"name":"ui-router","slug":"ui-router","description":""},{"id":21,"name":"Web","slug":"web","description":""},{"id":68,"name":"webapp","slug":"webapp","description":""},{"id":60,"name":"webview","slug":"webview","description":""},{"id":31,"name":"windows","slug":"windows","description":""},{"id":78,"name":"买房","slug":"%e4%b9%b0%e6%88%bf","description":""},{"id":23,"name":"优化","slug":"%e4%bc%98%e5%8c%96","description":""},{"id":22,"name":"前端","slug":"%e5%89%8d%e7%ab%af","description":""},{"id":48,"name":"国行","slug":"%e5%9b%bd%e8%a1%8c","description":""},{"id":50,"name":"地图API","slug":"%e5%9c%b0%e5%9b%beapi","description":""},{"id":76,"name":"婚纱照","slug":"%e5%a9%9a%e7%ba%b1%e7%85%a7","description":""},{"id":65,"name":"微信","slug":"%e5%be%ae%e4%bf%a1","description":""},{"id":79,"name":"换工作","slug":"%e6%8d%a2%e5%b7%a5%e4%bd%9c","description":""},{"id":33,"name":"日志","slug":"%e6%97%a5%e5%bf%97","description":""},{"id":74,"name":"未婚先胖","slug":"%e6%9c%aa%e5%a9%9a%e5%85%88%e8%83%96","description":""},{"id":39,"name":"本机","slug":"%e6%9c%ac%e6%9c%ba","description":""},{"id":8,"name":"毕业设计","slug":"%e6%af%95%e4%b8%9a%e8%ae%be%e8%ae%a1","description":""},{"id":40,"name":"测试","slug":"%e6%b5%8b%e8%af%95","description":""},{"id":75,"name":"生活","slug":"%e7%94%9f%e6%b4%bb","description":""},{"id":5,"name":"电子技术实验","slug":"%e7%94%b5%e5%ad%90%e6%8a%80%e6%9c%af%e5%ae%9e%e9%aa%8c","description":""},{"id":51,"name":"百度","slug":"%e7%99%be%e5%ba%a6","description":""},{"id":77,"name":"结婚","slug":"%e7%bb%93%e5%a9%9a","description":""},{"id":25,"name":"翻译","slug":"%e7%bf%bb%e8%af%91","description":""},{"id":6,"name":"虚拟实验","slug":"%e8%99%9a%e6%8b%9f%e5%ae%9e%e9%aa%8c","description":""},{"id":66,"name":"调试","slug":"%e8%b0%83%e8%af%95","description":""},{"id":59,"name":"调试，前端","slug":"%e8%b0%83%e8%af%95%ef%bc%8c%e5%89%8d%e7%ab%af","description":""},{"id":45,"name":"谷歌","slug":"%e8%b0%b7%e6%ad%8c","description":""},{"id":16,"name":"跨域","slug":"%e8%b7%a8%e5%9f%9f","description":""},{"id":54,"name":"通信录","slug":"%e9%80%9a%e4%bf%a1%e5%bd%95","description":""}],"posts_tags":[{"tag_id":9,"post_id":10},{"tag_id":7,"post_id":10},{"tag_id":8,"post_id":10},{"tag_id":5,"post_id":10},{"tag_id":6,"post_id":10},{"tag_id":47,"post_id":24},{"tag_id":13,"post_id":24},{"tag_id":46,"post_id":24},{"tag_id":44,"post_id":24},{"tag_id":12,"post_id":24},{"tag_id":49,"post_id":24},{"tag_id":19,"post_id":24},{"tag_id":48,"post_id":24},{"tag_id":50,"post_id":24},{"tag_id":51,"post_id":24},{"tag_id":45,"post_id":24},{"tag_id":34,"post_id":26},{"tag_id":19,"post_id":26},{"tag_id":17,"post_id":26},{"tag_id":20,"post_id":26},{"tag_id":16,"post_id":26},{"tag_id":26,"post_id":55},{"tag_id":19,"post_id":55},{"tag_id":24,"post_id":55},{"tag_id":27,"post_id":55},{"tag_id":21,"post_id":55},{"tag_id":23,"post_id":55},{"tag_id":22,"post_id":55},{"tag_id":25,"post_id":55},{"tag_id":32,"post_id":60},{"tag_id":30,"post_id":60},{"tag_id":28,"post_id":60},{"tag_id":29,"post_id":60},{"tag_id":31,"post_id":60},{"tag_id":33,"post_id":60},{"tag_id":41,"post_id":86},{"tag_id":37,"post_id":86},{"tag_id":42,"post_id":86},{"tag_id":38,"post_id":86},{"tag_id":43,"post_id":86},{"tag_id":39,"post_id":86},{"tag_id":40,"post_id":86},{"tag_id":53,"post_id":99},{"tag_id":56,"post_id":99},{"tag_id":52,"post_id":99},{"tag_id":20,"post_id":99},{"tag_id":55,"post_id":99},{"tag_id":54,"post_id":99},{"tag_id":58,"post_id":108},{"tag_id":57,"post_id":108},{"tag_id":19,"post_id":108},{"tag_id":59,"post_id":108},{"tag_id":47,"post_id":122},{"tag_id":61,"post_id":122},{"tag_id":19,"post_id":122},{"tag_id":60,"post_id":122},{"tag_id":22,"post_id":122},{"tag_id":57,"post_id":161},{"tag_id":61,"post_id":161},{"tag_id":64,"post_id":161},{"tag_id":65,"post_id":161},{"tag_id":66,"post_id":161},{"tag_id":47,"post_id":190},{"tag_id":70,"post_id":190},{"tag_id":67,"post_id":190},{"tag_id":69,"post_id":190},{"tag_id":12,"post_id":190},{"tag_id":61,"post_id":190},{"tag_id":72,"post_id":190},{"tag_id":19,"post_id":190},{"tag_id":73,"post_id":190},{"tag_id":71,"post_id":190},{"tag_id":68,"post_id":190},{"tag_id":60,"post_id":190},{"tag_id":76,"post_id":203},{"tag_id":74,"post_id":203},{"tag_id":75,"post_id":203},{"tag_id":78,"post_id":219},{"tag_id":79,"post_id":219},{"tag_id":75,"post_id":219},{"tag_id":77,"post_id":219}],"users":[{"id":1,"slug":"uestcldp","bio":false,"website":"","created_at":"Thu, 04 Jul 2013 12:41:03 +0000","created_by":1,"email":"awebird@gmail.com","name":"uestcldp"}]},"meta":{"exported_on":"Wed, 30 May 2018 06:27:27 +0000","version":"000"}}</下厨房></json.floors.length;></directory></directory></\\></script[^></\\></script[^></label>